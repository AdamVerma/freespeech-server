
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  identifier_token: string
  email: string
  name: string | null
  image: string | null
  hashed_password: string | null
  theme: string | null
  organizationId: string | null
}

/**
 * Model Organization
 * 
 */
export type Organization = {
  id: string
  name: string
}

/**
 * Model AccessToken
 * 
 */
export type AccessToken = {
  id: string
  access_token: string
  userId: string
}

/**
 * Model Tile
 * 
 */
export type Tile = {
  id: string
  tile_index: number
  tap_count: number
  link_id: string | null
  display_text: string | null
  speak_text: string | null
  image: string | null
  navigation_page_id: number | null
  modifier: string | null
  background_color: string | null
  border_color: string | null
  text_color: string | null
  is_silent: boolean
  is_invisible: boolean
  is_accented: boolean
  created_at: Date
  updated_at: Date
  tilePageId: number | null
  userId: string
  conjugations: string[]
}

/**
 * Model TilePage
 * 
 */
export type TilePage = {
  id: number
  name: string
  user_id: string
  created_at: Date
  updated_at: Date
  projectId: string | null
}

/**
 * Model Project
 * 
 */
export type Project = {
  id: string
  name: string
  description: string | null
  image: string | null
  columns: number
  index: number
  public: boolean
  created_at: Date
  updated_at: Date
  userId: string
}

/**
 * Model S3Resource
 * 
 */
export type S3Resource = {
  id: number
  url: string
  created_at: Date
  updated_at: Date
  userId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject>;

  /**
   * `prisma.accessToken`: Exposes CRUD operations for the **AccessToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccessTokens
    * const accessTokens = await prisma.accessToken.findMany()
    * ```
    */
  get accessToken(): Prisma.AccessTokenDelegate<GlobalReject>;

  /**
   * `prisma.tile`: Exposes CRUD operations for the **Tile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tiles
    * const tiles = await prisma.tile.findMany()
    * ```
    */
  get tile(): Prisma.TileDelegate<GlobalReject>;

  /**
   * `prisma.tilePage`: Exposes CRUD operations for the **TilePage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TilePages
    * const tilePages = await prisma.tilePage.findMany()
    * ```
    */
  get tilePage(): Prisma.TilePageDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.s3Resource`: Exposes CRUD operations for the **S3Resource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more S3Resources
    * const s3Resources = await prisma.s3Resource.findMany()
    * ```
    */
  get s3Resource(): Prisma.S3ResourceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    AccessToken: 'AccessToken',
    Tile: 'Tile',
    TilePage: 'TilePage',
    Project: 'Project',
    S3Resource: 'S3Resource'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    access_tokens: number
    s3_resources: number
    projects: number
    tiles: number
    tile_pages: number
  }

  export type UserCountOutputTypeSelect = {
    access_tokens?: boolean
    s3_resources?: boolean
    projects?: boolean
    tiles?: boolean
    tile_pages?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type OrganizationCountOutputType
   */


  export type OrganizationCountOutputType = {
    Users: number
  }

  export type OrganizationCountOutputTypeSelect = {
    Users?: boolean
  }

  export type OrganizationCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OrganizationCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OrganizationCountOutputType
    : S extends undefined
    ? never
    : S extends OrganizationCountOutputTypeArgs
    ?'include' extends U
    ? OrganizationCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OrganizationCountOutputType ? OrganizationCountOutputType[P] : never
  } 
    : OrganizationCountOutputType
  : OrganizationCountOutputType




  // Custom InputTypes

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     * 
    **/
    select?: OrganizationCountOutputTypeSelect | null
  }



  /**
   * Count Type TilePageCountOutputType
   */


  export type TilePageCountOutputType = {
    tiles: number
  }

  export type TilePageCountOutputTypeSelect = {
    tiles?: boolean
  }

  export type TilePageCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TilePageCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TilePageCountOutputType
    : S extends undefined
    ? never
    : S extends TilePageCountOutputTypeArgs
    ?'include' extends U
    ? TilePageCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TilePageCountOutputType ? TilePageCountOutputType[P] : never
  } 
    : TilePageCountOutputType
  : TilePageCountOutputType




  // Custom InputTypes

  /**
   * TilePageCountOutputType without action
   */
  export type TilePageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TilePageCountOutputType
     * 
    **/
    select?: TilePageCountOutputTypeSelect | null
  }



  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    pages: number
  }

  export type ProjectCountOutputTypeSelect = {
    pages?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProjectCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProjectCountOutputType
    : S extends undefined
    ? never
    : S extends ProjectCountOutputTypeArgs
    ?'include' extends U
    ? ProjectCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
    : ProjectCountOutputType
  : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     * 
    **/
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    identifier_token: string | null
    email: string | null
    name: string | null
    image: string | null
    hashed_password: string | null
    theme: string | null
    organizationId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    identifier_token: string | null
    email: string | null
    name: string | null
    image: string | null
    hashed_password: string | null
    theme: string | null
    organizationId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    identifier_token: number
    email: number
    name: number
    image: number
    hashed_password: number
    theme: number
    organizationId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    identifier_token?: true
    email?: true
    name?: true
    image?: true
    hashed_password?: true
    theme?: true
    organizationId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    identifier_token?: true
    email?: true
    name?: true
    image?: true
    hashed_password?: true
    theme?: true
    organizationId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    identifier_token?: true
    email?: true
    name?: true
    image?: true
    hashed_password?: true
    theme?: true
    organizationId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    identifier_token: string
    email: string
    name: string | null
    image: string | null
    hashed_password: string | null
    theme: string | null
    organizationId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    identifier_token?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    hashed_password?: boolean
    theme?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationArgs
    access_tokens?: boolean | AccessTokenFindManyArgs
    s3_resources?: boolean | S3ResourceFindManyArgs
    projects?: boolean | ProjectFindManyArgs
    tiles?: boolean | TileFindManyArgs
    tile_pages?: boolean | TilePageFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    organization?: boolean | OrganizationArgs
    access_tokens?: boolean | AccessTokenFindManyArgs
    s3_resources?: boolean | S3ResourceFindManyArgs
    projects?: boolean | ProjectFindManyArgs
    tiles?: boolean | TileFindManyArgs
    tile_pages?: boolean | TilePageFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'organization' ? OrganizationGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'access_tokens' ? Array < AccessTokenGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 's3_resources' ? Array < S3ResourceGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'projects' ? Array < ProjectGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'tiles' ? Array < TileGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'tile_pages' ? Array < TilePageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'organization' ? OrganizationGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'access_tokens' ? Array < AccessTokenGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 's3_resources' ? Array < S3ResourceGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'projects' ? Array < ProjectGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'tiles' ? Array < TileGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'tile_pages' ? Array < TilePageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organization<T extends OrganizationArgs = {}>(args?: Subset<T, OrganizationArgs>): CheckSelect<T, Prisma__OrganizationClient<Organization | Null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>>;

    access_tokens<T extends AccessTokenFindManyArgs = {}>(args?: Subset<T, AccessTokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AccessToken>| Null>, PrismaPromise<Array<AccessTokenGetPayload<T>>| Null>>;

    s3_resources<T extends S3ResourceFindManyArgs = {}>(args?: Subset<T, S3ResourceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<S3Resource>| Null>, PrismaPromise<Array<S3ResourceGetPayload<T>>| Null>>;

    projects<T extends ProjectFindManyArgs = {}>(args?: Subset<T, ProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Project>| Null>, PrismaPromise<Array<ProjectGetPayload<T>>| Null>>;

    tiles<T extends TileFindManyArgs = {}>(args?: Subset<T, TileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tile>| Null>, PrismaPromise<Array<TileGetPayload<T>>| Null>>;

    tile_pages<T extends TilePageFindManyArgs = {}>(args?: Subset<T, TilePageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TilePage>| Null>, PrismaPromise<Array<TilePageGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which Organization to aggregate.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByWithAggregationInput>
    by: Array<OrganizationScalarFieldEnum>
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect = {
    id?: boolean
    name?: boolean
    Users?: boolean | UserFindManyArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }

  export type OrganizationInclude = {
    Users?: boolean | UserFindManyArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }

  export type OrganizationGetPayload<
    S extends boolean | null | undefined | OrganizationArgs,
    U = keyof S
      > = S extends true
        ? Organization
    : S extends undefined
    ? never
    : S extends OrganizationArgs | OrganizationFindManyArgs
    ?'include' extends U
    ? Organization  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Users' ? Array < UserGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Users' ? Array < UserGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Organization ? Organization[P] : never
  } 
    : Organization
  : Organization


  type OrganizationCountArgs = Merge<
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }
  >

  export interface OrganizationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null, null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null, null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs>(
      args?: SelectSubset<T, OrganizationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Organization>>, PrismaPromise<Array<OrganizationGetPayload<T>>>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: SelectSubset<T, OrganizationCreateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs>(
      args?: SelectSubset<T, OrganizationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: SelectSubset<T, OrganizationDeleteArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: SelectSubset<T, OrganizationUpdateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: SelectSubset<T, OrganizationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: SelectSubset<T, OrganizationUpsertArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Find one Organization that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Find the first Organization that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>| Null>, PrismaPromise<Array<UserGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Organization base type for findUnique actions
   */
  export type OrganizationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization: findUnique
   */
  export interface OrganizationFindUniqueArgs extends OrganizationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization base type for findFirst actions
   */
  export type OrganizationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     * 
    **/
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }

  /**
   * Organization: findFirst
   */
  export interface OrganizationFindFirstArgs extends OrganizationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
     * 
    **/
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs = {
    /**
     * The data used to create many Organizations.
     * 
    **/
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
     * 
    **/
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    /**
     * The data used to update Organizations.
     * 
    **/
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     * 
    **/
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
     * 
    **/
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     * 
    **/
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    /**
     * Filter which Organizations to delete
     * 
    **/
    where?: OrganizationWhereInput
  }


  /**
   * Organization: findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs = OrganizationFindUniqueArgsBase
      

  /**
   * Organization: findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs = OrganizationFindFirstArgsBase
      

  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
  }



  /**
   * Model AccessToken
   */


  export type AggregateAccessToken = {
    _count: AccessTokenCountAggregateOutputType | null
    _min: AccessTokenMinAggregateOutputType | null
    _max: AccessTokenMaxAggregateOutputType | null
  }

  export type AccessTokenMinAggregateOutputType = {
    id: string | null
    access_token: string | null
    userId: string | null
  }

  export type AccessTokenMaxAggregateOutputType = {
    id: string | null
    access_token: string | null
    userId: string | null
  }

  export type AccessTokenCountAggregateOutputType = {
    id: number
    access_token: number
    userId: number
    _all: number
  }


  export type AccessTokenMinAggregateInputType = {
    id?: true
    access_token?: true
    userId?: true
  }

  export type AccessTokenMaxAggregateInputType = {
    id?: true
    access_token?: true
    userId?: true
  }

  export type AccessTokenCountAggregateInputType = {
    id?: true
    access_token?: true
    userId?: true
    _all?: true
  }

  export type AccessTokenAggregateArgs = {
    /**
     * Filter which AccessToken to aggregate.
     * 
    **/
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccessTokens
    **/
    _count?: true | AccessTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessTokenMaxAggregateInputType
  }

  export type GetAccessTokenAggregateType<T extends AccessTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessToken[P]>
      : GetScalarType<T[P], AggregateAccessToken[P]>
  }




  export type AccessTokenGroupByArgs = {
    where?: AccessTokenWhereInput
    orderBy?: Enumerable<AccessTokenOrderByWithAggregationInput>
    by: Array<AccessTokenScalarFieldEnum>
    having?: AccessTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessTokenCountAggregateInputType | true
    _min?: AccessTokenMinAggregateInputType
    _max?: AccessTokenMaxAggregateInputType
  }


  export type AccessTokenGroupByOutputType = {
    id: string
    access_token: string
    userId: string
    _count: AccessTokenCountAggregateOutputType | null
    _min: AccessTokenMinAggregateOutputType | null
    _max: AccessTokenMaxAggregateOutputType | null
  }

  type GetAccessTokenGroupByPayload<T extends AccessTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccessTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
            : GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
        }
      >
    >


  export type AccessTokenSelect = {
    id?: boolean
    access_token?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }

  export type AccessTokenInclude = {
    user?: boolean | UserArgs
  }

  export type AccessTokenGetPayload<
    S extends boolean | null | undefined | AccessTokenArgs,
    U = keyof S
      > = S extends true
        ? AccessToken
    : S extends undefined
    ? never
    : S extends AccessTokenArgs | AccessTokenFindManyArgs
    ?'include' extends U
    ? AccessToken  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof AccessToken ? AccessToken[P] : never
  } 
    : AccessToken
  : AccessToken


  type AccessTokenCountArgs = Merge<
    Omit<AccessTokenFindManyArgs, 'select' | 'include'> & {
      select?: AccessTokenCountAggregateInputType | true
    }
  >

  export interface AccessTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one AccessToken that matches the filter.
     * @param {AccessTokenFindUniqueArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccessTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccessTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AccessToken'> extends True ? CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>> : CheckSelect<T, Prisma__AccessTokenClient<AccessToken | null, null>, Prisma__AccessTokenClient<AccessTokenGetPayload<T> | null, null>>

    /**
     * Find the first AccessToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindFirstArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccessTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccessTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AccessToken'> extends True ? CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>> : CheckSelect<T, Prisma__AccessTokenClient<AccessToken | null, null>, Prisma__AccessTokenClient<AccessTokenGetPayload<T> | null, null>>

    /**
     * Find zero or more AccessTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccessTokens
     * const accessTokens = await prisma.accessToken.findMany()
     * 
     * // Get first 10 AccessTokens
     * const accessTokens = await prisma.accessToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessTokenWithIdOnly = await prisma.accessToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccessTokenFindManyArgs>(
      args?: SelectSubset<T, AccessTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AccessToken>>, PrismaPromise<Array<AccessTokenGetPayload<T>>>>

    /**
     * Create a AccessToken.
     * @param {AccessTokenCreateArgs} args - Arguments to create a AccessToken.
     * @example
     * // Create one AccessToken
     * const AccessToken = await prisma.accessToken.create({
     *   data: {
     *     // ... data to create a AccessToken
     *   }
     * })
     * 
    **/
    create<T extends AccessTokenCreateArgs>(
      args: SelectSubset<T, AccessTokenCreateArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Create many AccessTokens.
     *     @param {AccessTokenCreateManyArgs} args - Arguments to create many AccessTokens.
     *     @example
     *     // Create many AccessTokens
     *     const accessToken = await prisma.accessToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccessTokenCreateManyArgs>(
      args?: SelectSubset<T, AccessTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AccessToken.
     * @param {AccessTokenDeleteArgs} args - Arguments to delete one AccessToken.
     * @example
     * // Delete one AccessToken
     * const AccessToken = await prisma.accessToken.delete({
     *   where: {
     *     // ... filter to delete one AccessToken
     *   }
     * })
     * 
    **/
    delete<T extends AccessTokenDeleteArgs>(
      args: SelectSubset<T, AccessTokenDeleteArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Update one AccessToken.
     * @param {AccessTokenUpdateArgs} args - Arguments to update one AccessToken.
     * @example
     * // Update one AccessToken
     * const accessToken = await prisma.accessToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccessTokenUpdateArgs>(
      args: SelectSubset<T, AccessTokenUpdateArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Delete zero or more AccessTokens.
     * @param {AccessTokenDeleteManyArgs} args - Arguments to filter AccessTokens to delete.
     * @example
     * // Delete a few AccessTokens
     * const { count } = await prisma.accessToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccessTokenDeleteManyArgs>(
      args?: SelectSubset<T, AccessTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccessTokens
     * const accessToken = await prisma.accessToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccessTokenUpdateManyArgs>(
      args: SelectSubset<T, AccessTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AccessToken.
     * @param {AccessTokenUpsertArgs} args - Arguments to update or create a AccessToken.
     * @example
     * // Update or create a AccessToken
     * const accessToken = await prisma.accessToken.upsert({
     *   create: {
     *     // ... data to create a AccessToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccessToken we want to update
     *   }
     * })
    **/
    upsert<T extends AccessTokenUpsertArgs>(
      args: SelectSubset<T, AccessTokenUpsertArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Find one AccessToken that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AccessTokenFindUniqueOrThrowArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccessTokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccessTokenFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Find the first AccessToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindFirstOrThrowArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccessTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccessTokenFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AccessTokenClient<AccessToken>, Prisma__AccessTokenClient<AccessTokenGetPayload<T>>>

    /**
     * Count the number of AccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenCountArgs} args - Arguments to filter AccessTokens to count.
     * @example
     * // Count the number of AccessTokens
     * const count = await prisma.accessToken.count({
     *   where: {
     *     // ... the filter for the AccessTokens we want to count
     *   }
     * })
    **/
    count<T extends AccessTokenCountArgs>(
      args?: Subset<T, AccessTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessTokenAggregateArgs>(args: Subset<T, AccessTokenAggregateArgs>): PrismaPromise<GetAccessTokenAggregateType<T>>

    /**
     * Group by AccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessTokenGroupByArgs['orderBy'] }
        : { orderBy?: AccessTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessTokenGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AccessToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccessTokenClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AccessToken base type for findUnique actions
   */
  export type AccessTokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * Filter, which AccessToken to fetch.
     * 
    **/
    where: AccessTokenWhereUniqueInput
  }

  /**
   * AccessToken: findUnique
   */
  export interface AccessTokenFindUniqueArgs extends AccessTokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AccessToken base type for findFirst actions
   */
  export type AccessTokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * Filter, which AccessToken to fetch.
     * 
    **/
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessTokens.
     * 
    **/
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessTokens.
     * 
    **/
    distinct?: Enumerable<AccessTokenScalarFieldEnum>
  }

  /**
   * AccessToken: findFirst
   */
  export interface AccessTokenFindFirstArgs extends AccessTokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AccessToken findMany
   */
  export type AccessTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * Filter, which AccessTokens to fetch.
     * 
    **/
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccessTokens.
     * 
    **/
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccessTokenScalarFieldEnum>
  }


  /**
   * AccessToken create
   */
  export type AccessTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * The data needed to create a AccessToken.
     * 
    **/
    data: XOR<AccessTokenCreateInput, AccessTokenUncheckedCreateInput>
  }


  /**
   * AccessToken createMany
   */
  export type AccessTokenCreateManyArgs = {
    /**
     * The data used to create many AccessTokens.
     * 
    **/
    data: Enumerable<AccessTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AccessToken update
   */
  export type AccessTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * The data needed to update a AccessToken.
     * 
    **/
    data: XOR<AccessTokenUpdateInput, AccessTokenUncheckedUpdateInput>
    /**
     * Choose, which AccessToken to update.
     * 
    **/
    where: AccessTokenWhereUniqueInput
  }


  /**
   * AccessToken updateMany
   */
  export type AccessTokenUpdateManyArgs = {
    /**
     * The data used to update AccessTokens.
     * 
    **/
    data: XOR<AccessTokenUpdateManyMutationInput, AccessTokenUncheckedUpdateManyInput>
    /**
     * Filter which AccessTokens to update
     * 
    **/
    where?: AccessTokenWhereInput
  }


  /**
   * AccessToken upsert
   */
  export type AccessTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * The filter to search for the AccessToken to update in case it exists.
     * 
    **/
    where: AccessTokenWhereUniqueInput
    /**
     * In case the AccessToken found by the `where` argument doesn't exist, create a new AccessToken with this data.
     * 
    **/
    create: XOR<AccessTokenCreateInput, AccessTokenUncheckedCreateInput>
    /**
     * In case the AccessToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccessTokenUpdateInput, AccessTokenUncheckedUpdateInput>
  }


  /**
   * AccessToken delete
   */
  export type AccessTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
    /**
     * Filter which AccessToken to delete.
     * 
    **/
    where: AccessTokenWhereUniqueInput
  }


  /**
   * AccessToken deleteMany
   */
  export type AccessTokenDeleteManyArgs = {
    /**
     * Filter which AccessTokens to delete
     * 
    **/
    where?: AccessTokenWhereInput
  }


  /**
   * AccessToken: findUniqueOrThrow
   */
  export type AccessTokenFindUniqueOrThrowArgs = AccessTokenFindUniqueArgsBase
      

  /**
   * AccessToken: findFirstOrThrow
   */
  export type AccessTokenFindFirstOrThrowArgs = AccessTokenFindFirstArgsBase
      

  /**
   * AccessToken without action
   */
  export type AccessTokenArgs = {
    /**
     * Select specific fields to fetch from the AccessToken
     * 
    **/
    select?: AccessTokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessTokenInclude | null
  }



  /**
   * Model Tile
   */


  export type AggregateTile = {
    _count: TileCountAggregateOutputType | null
    _avg: TileAvgAggregateOutputType | null
    _sum: TileSumAggregateOutputType | null
    _min: TileMinAggregateOutputType | null
    _max: TileMaxAggregateOutputType | null
  }

  export type TileAvgAggregateOutputType = {
    tile_index: number | null
    tap_count: number | null
    navigation_page_id: number | null
    tilePageId: number | null
  }

  export type TileSumAggregateOutputType = {
    tile_index: number | null
    tap_count: number | null
    navigation_page_id: number | null
    tilePageId: number | null
  }

  export type TileMinAggregateOutputType = {
    id: string | null
    tile_index: number | null
    tap_count: number | null
    link_id: string | null
    display_text: string | null
    speak_text: string | null
    image: string | null
    navigation_page_id: number | null
    modifier: string | null
    background_color: string | null
    border_color: string | null
    text_color: string | null
    is_silent: boolean | null
    is_invisible: boolean | null
    is_accented: boolean | null
    created_at: Date | null
    updated_at: Date | null
    tilePageId: number | null
    userId: string | null
  }

  export type TileMaxAggregateOutputType = {
    id: string | null
    tile_index: number | null
    tap_count: number | null
    link_id: string | null
    display_text: string | null
    speak_text: string | null
    image: string | null
    navigation_page_id: number | null
    modifier: string | null
    background_color: string | null
    border_color: string | null
    text_color: string | null
    is_silent: boolean | null
    is_invisible: boolean | null
    is_accented: boolean | null
    created_at: Date | null
    updated_at: Date | null
    tilePageId: number | null
    userId: string | null
  }

  export type TileCountAggregateOutputType = {
    id: number
    tile_index: number
    tap_count: number
    link_id: number
    display_text: number
    speak_text: number
    image: number
    navigation_page_id: number
    modifier: number
    background_color: number
    border_color: number
    text_color: number
    is_silent: number
    is_invisible: number
    is_accented: number
    created_at: number
    updated_at: number
    tilePageId: number
    userId: number
    conjugations: number
    _all: number
  }


  export type TileAvgAggregateInputType = {
    tile_index?: true
    tap_count?: true
    navigation_page_id?: true
    tilePageId?: true
  }

  export type TileSumAggregateInputType = {
    tile_index?: true
    tap_count?: true
    navigation_page_id?: true
    tilePageId?: true
  }

  export type TileMinAggregateInputType = {
    id?: true
    tile_index?: true
    tap_count?: true
    link_id?: true
    display_text?: true
    speak_text?: true
    image?: true
    navigation_page_id?: true
    modifier?: true
    background_color?: true
    border_color?: true
    text_color?: true
    is_silent?: true
    is_invisible?: true
    is_accented?: true
    created_at?: true
    updated_at?: true
    tilePageId?: true
    userId?: true
  }

  export type TileMaxAggregateInputType = {
    id?: true
    tile_index?: true
    tap_count?: true
    link_id?: true
    display_text?: true
    speak_text?: true
    image?: true
    navigation_page_id?: true
    modifier?: true
    background_color?: true
    border_color?: true
    text_color?: true
    is_silent?: true
    is_invisible?: true
    is_accented?: true
    created_at?: true
    updated_at?: true
    tilePageId?: true
    userId?: true
  }

  export type TileCountAggregateInputType = {
    id?: true
    tile_index?: true
    tap_count?: true
    link_id?: true
    display_text?: true
    speak_text?: true
    image?: true
    navigation_page_id?: true
    modifier?: true
    background_color?: true
    border_color?: true
    text_color?: true
    is_silent?: true
    is_invisible?: true
    is_accented?: true
    created_at?: true
    updated_at?: true
    tilePageId?: true
    userId?: true
    conjugations?: true
    _all?: true
  }

  export type TileAggregateArgs = {
    /**
     * Filter which Tile to aggregate.
     * 
    **/
    where?: TileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tiles to fetch.
     * 
    **/
    orderBy?: Enumerable<TileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tiles
    **/
    _count?: true | TileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TileMaxAggregateInputType
  }

  export type GetTileAggregateType<T extends TileAggregateArgs> = {
        [P in keyof T & keyof AggregateTile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTile[P]>
      : GetScalarType<T[P], AggregateTile[P]>
  }




  export type TileGroupByArgs = {
    where?: TileWhereInput
    orderBy?: Enumerable<TileOrderByWithAggregationInput>
    by: Array<TileScalarFieldEnum>
    having?: TileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TileCountAggregateInputType | true
    _avg?: TileAvgAggregateInputType
    _sum?: TileSumAggregateInputType
    _min?: TileMinAggregateInputType
    _max?: TileMaxAggregateInputType
  }


  export type TileGroupByOutputType = {
    id: string
    tile_index: number
    tap_count: number
    link_id: string | null
    display_text: string | null
    speak_text: string | null
    image: string | null
    navigation_page_id: number | null
    modifier: string | null
    background_color: string | null
    border_color: string | null
    text_color: string | null
    is_silent: boolean
    is_invisible: boolean
    is_accented: boolean
    created_at: Date
    updated_at: Date
    tilePageId: number | null
    userId: string
    conjugations: string[]
    _count: TileCountAggregateOutputType | null
    _avg: TileAvgAggregateOutputType | null
    _sum: TileSumAggregateOutputType | null
    _min: TileMinAggregateOutputType | null
    _max: TileMaxAggregateOutputType | null
  }

  type GetTileGroupByPayload<T extends TileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TileGroupByOutputType[P]>
            : GetScalarType<T[P], TileGroupByOutputType[P]>
        }
      >
    >


  export type TileSelect = {
    id?: boolean
    tile_index?: boolean
    tap_count?: boolean
    link_id?: boolean
    display_text?: boolean
    speak_text?: boolean
    image?: boolean
    navigation_page_id?: boolean
    modifier?: boolean
    background_color?: boolean
    border_color?: boolean
    text_color?: boolean
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: boolean
    updated_at?: boolean
    tilePageId?: boolean
    userId?: boolean
    conjugations?: boolean
    parent_page?: boolean | TilePageArgs
    author?: boolean | UserArgs
  }

  export type TileInclude = {
    parent_page?: boolean | TilePageArgs
    author?: boolean | UserArgs
  }

  export type TileGetPayload<
    S extends boolean | null | undefined | TileArgs,
    U = keyof S
      > = S extends true
        ? Tile
    : S extends undefined
    ? never
    : S extends TileArgs | TileFindManyArgs
    ?'include' extends U
    ? Tile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'parent_page' ? TilePageGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'author' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'parent_page' ? TilePageGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'author' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Tile ? Tile[P] : never
  } 
    : Tile
  : Tile


  type TileCountArgs = Merge<
    Omit<TileFindManyArgs, 'select' | 'include'> & {
      select?: TileCountAggregateInputType | true
    }
  >

  export interface TileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tile that matches the filter.
     * @param {TileFindUniqueArgs} args - Arguments to find a Tile
     * @example
     * // Get one Tile
     * const tile = await prisma.tile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tile'> extends True ? CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>> : CheckSelect<T, Prisma__TileClient<Tile | null, null>, Prisma__TileClient<TileGetPayload<T> | null, null>>

    /**
     * Find the first Tile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileFindFirstArgs} args - Arguments to find a Tile
     * @example
     * // Get one Tile
     * const tile = await prisma.tile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tile'> extends True ? CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>> : CheckSelect<T, Prisma__TileClient<Tile | null, null>, Prisma__TileClient<TileGetPayload<T> | null, null>>

    /**
     * Find zero or more Tiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tiles
     * const tiles = await prisma.tile.findMany()
     * 
     * // Get first 10 Tiles
     * const tiles = await prisma.tile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tileWithIdOnly = await prisma.tile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TileFindManyArgs>(
      args?: SelectSubset<T, TileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tile>>, PrismaPromise<Array<TileGetPayload<T>>>>

    /**
     * Create a Tile.
     * @param {TileCreateArgs} args - Arguments to create a Tile.
     * @example
     * // Create one Tile
     * const Tile = await prisma.tile.create({
     *   data: {
     *     // ... data to create a Tile
     *   }
     * })
     * 
    **/
    create<T extends TileCreateArgs>(
      args: SelectSubset<T, TileCreateArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Create many Tiles.
     *     @param {TileCreateManyArgs} args - Arguments to create many Tiles.
     *     @example
     *     // Create many Tiles
     *     const tile = await prisma.tile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TileCreateManyArgs>(
      args?: SelectSubset<T, TileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tile.
     * @param {TileDeleteArgs} args - Arguments to delete one Tile.
     * @example
     * // Delete one Tile
     * const Tile = await prisma.tile.delete({
     *   where: {
     *     // ... filter to delete one Tile
     *   }
     * })
     * 
    **/
    delete<T extends TileDeleteArgs>(
      args: SelectSubset<T, TileDeleteArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Update one Tile.
     * @param {TileUpdateArgs} args - Arguments to update one Tile.
     * @example
     * // Update one Tile
     * const tile = await prisma.tile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TileUpdateArgs>(
      args: SelectSubset<T, TileUpdateArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Delete zero or more Tiles.
     * @param {TileDeleteManyArgs} args - Arguments to filter Tiles to delete.
     * @example
     * // Delete a few Tiles
     * const { count } = await prisma.tile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TileDeleteManyArgs>(
      args?: SelectSubset<T, TileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tiles
     * const tile = await prisma.tile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TileUpdateManyArgs>(
      args: SelectSubset<T, TileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tile.
     * @param {TileUpsertArgs} args - Arguments to update or create a Tile.
     * @example
     * // Update or create a Tile
     * const tile = await prisma.tile.upsert({
     *   create: {
     *     // ... data to create a Tile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tile we want to update
     *   }
     * })
    **/
    upsert<T extends TileUpsertArgs>(
      args: SelectSubset<T, TileUpsertArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Find one Tile that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TileFindUniqueOrThrowArgs} args - Arguments to find a Tile
     * @example
     * // Get one Tile
     * const tile = await prisma.tile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TileFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Find the first Tile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileFindFirstOrThrowArgs} args - Arguments to find a Tile
     * @example
     * // Get one Tile
     * const tile = await prisma.tile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TileFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TileClient<Tile>, Prisma__TileClient<TileGetPayload<T>>>

    /**
     * Count the number of Tiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileCountArgs} args - Arguments to filter Tiles to count.
     * @example
     * // Count the number of Tiles
     * const count = await prisma.tile.count({
     *   where: {
     *     // ... the filter for the Tiles we want to count
     *   }
     * })
    **/
    count<T extends TileCountArgs>(
      args?: Subset<T, TileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TileAggregateArgs>(args: Subset<T, TileAggregateArgs>): PrismaPromise<GetTileAggregateType<T>>

    /**
     * Group by Tile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TileGroupByArgs['orderBy'] }
        : { orderBy?: TileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTileGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TileClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    parent_page<T extends TilePageArgs = {}>(args?: Subset<T, TilePageArgs>): CheckSelect<T, Prisma__TilePageClient<TilePage | Null>, Prisma__TilePageClient<TilePageGetPayload<T> | Null>>;

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tile base type for findUnique actions
   */
  export type TileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * Filter, which Tile to fetch.
     * 
    **/
    where: TileWhereUniqueInput
  }

  /**
   * Tile: findUnique
   */
  export interface TileFindUniqueArgs extends TileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tile base type for findFirst actions
   */
  export type TileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * Filter, which Tile to fetch.
     * 
    **/
    where?: TileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tiles to fetch.
     * 
    **/
    orderBy?: Enumerable<TileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tiles.
     * 
    **/
    cursor?: TileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tiles.
     * 
    **/
    distinct?: Enumerable<TileScalarFieldEnum>
  }

  /**
   * Tile: findFirst
   */
  export interface TileFindFirstArgs extends TileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tile findMany
   */
  export type TileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * Filter, which Tiles to fetch.
     * 
    **/
    where?: TileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tiles to fetch.
     * 
    **/
    orderBy?: Enumerable<TileOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tiles.
     * 
    **/
    cursor?: TileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TileScalarFieldEnum>
  }


  /**
   * Tile create
   */
  export type TileCreateArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * The data needed to create a Tile.
     * 
    **/
    data: XOR<TileCreateInput, TileUncheckedCreateInput>
  }


  /**
   * Tile createMany
   */
  export type TileCreateManyArgs = {
    /**
     * The data used to create many Tiles.
     * 
    **/
    data: Enumerable<TileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tile update
   */
  export type TileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * The data needed to update a Tile.
     * 
    **/
    data: XOR<TileUpdateInput, TileUncheckedUpdateInput>
    /**
     * Choose, which Tile to update.
     * 
    **/
    where: TileWhereUniqueInput
  }


  /**
   * Tile updateMany
   */
  export type TileUpdateManyArgs = {
    /**
     * The data used to update Tiles.
     * 
    **/
    data: XOR<TileUpdateManyMutationInput, TileUncheckedUpdateManyInput>
    /**
     * Filter which Tiles to update
     * 
    **/
    where?: TileWhereInput
  }


  /**
   * Tile upsert
   */
  export type TileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * The filter to search for the Tile to update in case it exists.
     * 
    **/
    where: TileWhereUniqueInput
    /**
     * In case the Tile found by the `where` argument doesn't exist, create a new Tile with this data.
     * 
    **/
    create: XOR<TileCreateInput, TileUncheckedCreateInput>
    /**
     * In case the Tile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TileUpdateInput, TileUncheckedUpdateInput>
  }


  /**
   * Tile delete
   */
  export type TileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
    /**
     * Filter which Tile to delete.
     * 
    **/
    where: TileWhereUniqueInput
  }


  /**
   * Tile deleteMany
   */
  export type TileDeleteManyArgs = {
    /**
     * Filter which Tiles to delete
     * 
    **/
    where?: TileWhereInput
  }


  /**
   * Tile: findUniqueOrThrow
   */
  export type TileFindUniqueOrThrowArgs = TileFindUniqueArgsBase
      

  /**
   * Tile: findFirstOrThrow
   */
  export type TileFindFirstOrThrowArgs = TileFindFirstArgsBase
      

  /**
   * Tile without action
   */
  export type TileArgs = {
    /**
     * Select specific fields to fetch from the Tile
     * 
    **/
    select?: TileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TileInclude | null
  }



  /**
   * Model TilePage
   */


  export type AggregateTilePage = {
    _count: TilePageCountAggregateOutputType | null
    _avg: TilePageAvgAggregateOutputType | null
    _sum: TilePageSumAggregateOutputType | null
    _min: TilePageMinAggregateOutputType | null
    _max: TilePageMaxAggregateOutputType | null
  }

  export type TilePageAvgAggregateOutputType = {
    id: number | null
  }

  export type TilePageSumAggregateOutputType = {
    id: number | null
  }

  export type TilePageMinAggregateOutputType = {
    id: number | null
    name: string | null
    user_id: string | null
    created_at: Date | null
    updated_at: Date | null
    projectId: string | null
  }

  export type TilePageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    user_id: string | null
    created_at: Date | null
    updated_at: Date | null
    projectId: string | null
  }

  export type TilePageCountAggregateOutputType = {
    id: number
    name: number
    user_id: number
    created_at: number
    updated_at: number
    projectId: number
    _all: number
  }


  export type TilePageAvgAggregateInputType = {
    id?: true
  }

  export type TilePageSumAggregateInputType = {
    id?: true
  }

  export type TilePageMinAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    projectId?: true
  }

  export type TilePageMaxAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    projectId?: true
  }

  export type TilePageCountAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    projectId?: true
    _all?: true
  }

  export type TilePageAggregateArgs = {
    /**
     * Filter which TilePage to aggregate.
     * 
    **/
    where?: TilePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TilePages to fetch.
     * 
    **/
    orderBy?: Enumerable<TilePageOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TilePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TilePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TilePages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TilePages
    **/
    _count?: true | TilePageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TilePageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TilePageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TilePageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TilePageMaxAggregateInputType
  }

  export type GetTilePageAggregateType<T extends TilePageAggregateArgs> = {
        [P in keyof T & keyof AggregateTilePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTilePage[P]>
      : GetScalarType<T[P], AggregateTilePage[P]>
  }




  export type TilePageGroupByArgs = {
    where?: TilePageWhereInput
    orderBy?: Enumerable<TilePageOrderByWithAggregationInput>
    by: Array<TilePageScalarFieldEnum>
    having?: TilePageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TilePageCountAggregateInputType | true
    _avg?: TilePageAvgAggregateInputType
    _sum?: TilePageSumAggregateInputType
    _min?: TilePageMinAggregateInputType
    _max?: TilePageMaxAggregateInputType
  }


  export type TilePageGroupByOutputType = {
    id: number
    name: string
    user_id: string
    created_at: Date
    updated_at: Date
    projectId: string | null
    _count: TilePageCountAggregateOutputType | null
    _avg: TilePageAvgAggregateOutputType | null
    _sum: TilePageSumAggregateOutputType | null
    _min: TilePageMinAggregateOutputType | null
    _max: TilePageMaxAggregateOutputType | null
  }

  type GetTilePageGroupByPayload<T extends TilePageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TilePageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TilePageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TilePageGroupByOutputType[P]>
            : GetScalarType<T[P], TilePageGroupByOutputType[P]>
        }
      >
    >


  export type TilePageSelect = {
    id?: boolean
    name?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    projectId?: boolean
    Project?: boolean | ProjectArgs
    user?: boolean | UserArgs
    tiles?: boolean | TileFindManyArgs
    _count?: boolean | TilePageCountOutputTypeArgs
  }

  export type TilePageInclude = {
    Project?: boolean | ProjectArgs
    user?: boolean | UserArgs
    tiles?: boolean | TileFindManyArgs
    _count?: boolean | TilePageCountOutputTypeArgs
  }

  export type TilePageGetPayload<
    S extends boolean | null | undefined | TilePageArgs,
    U = keyof S
      > = S extends true
        ? TilePage
    : S extends undefined
    ? never
    : S extends TilePageArgs | TilePageFindManyArgs
    ?'include' extends U
    ? TilePage  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Project' ? ProjectGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'tiles' ? Array < TileGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TilePageCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Project' ? ProjectGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'tiles' ? Array < TileGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TilePageCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof TilePage ? TilePage[P] : never
  } 
    : TilePage
  : TilePage


  type TilePageCountArgs = Merge<
    Omit<TilePageFindManyArgs, 'select' | 'include'> & {
      select?: TilePageCountAggregateInputType | true
    }
  >

  export interface TilePageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TilePage that matches the filter.
     * @param {TilePageFindUniqueArgs} args - Arguments to find a TilePage
     * @example
     * // Get one TilePage
     * const tilePage = await prisma.tilePage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TilePageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TilePageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TilePage'> extends True ? CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>> : CheckSelect<T, Prisma__TilePageClient<TilePage | null, null>, Prisma__TilePageClient<TilePageGetPayload<T> | null, null>>

    /**
     * Find the first TilePage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageFindFirstArgs} args - Arguments to find a TilePage
     * @example
     * // Get one TilePage
     * const tilePage = await prisma.tilePage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TilePageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TilePageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TilePage'> extends True ? CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>> : CheckSelect<T, Prisma__TilePageClient<TilePage | null, null>, Prisma__TilePageClient<TilePageGetPayload<T> | null, null>>

    /**
     * Find zero or more TilePages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TilePages
     * const tilePages = await prisma.tilePage.findMany()
     * 
     * // Get first 10 TilePages
     * const tilePages = await prisma.tilePage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tilePageWithIdOnly = await prisma.tilePage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TilePageFindManyArgs>(
      args?: SelectSubset<T, TilePageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TilePage>>, PrismaPromise<Array<TilePageGetPayload<T>>>>

    /**
     * Create a TilePage.
     * @param {TilePageCreateArgs} args - Arguments to create a TilePage.
     * @example
     * // Create one TilePage
     * const TilePage = await prisma.tilePage.create({
     *   data: {
     *     // ... data to create a TilePage
     *   }
     * })
     * 
    **/
    create<T extends TilePageCreateArgs>(
      args: SelectSubset<T, TilePageCreateArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Create many TilePages.
     *     @param {TilePageCreateManyArgs} args - Arguments to create many TilePages.
     *     @example
     *     // Create many TilePages
     *     const tilePage = await prisma.tilePage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TilePageCreateManyArgs>(
      args?: SelectSubset<T, TilePageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TilePage.
     * @param {TilePageDeleteArgs} args - Arguments to delete one TilePage.
     * @example
     * // Delete one TilePage
     * const TilePage = await prisma.tilePage.delete({
     *   where: {
     *     // ... filter to delete one TilePage
     *   }
     * })
     * 
    **/
    delete<T extends TilePageDeleteArgs>(
      args: SelectSubset<T, TilePageDeleteArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Update one TilePage.
     * @param {TilePageUpdateArgs} args - Arguments to update one TilePage.
     * @example
     * // Update one TilePage
     * const tilePage = await prisma.tilePage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TilePageUpdateArgs>(
      args: SelectSubset<T, TilePageUpdateArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Delete zero or more TilePages.
     * @param {TilePageDeleteManyArgs} args - Arguments to filter TilePages to delete.
     * @example
     * // Delete a few TilePages
     * const { count } = await prisma.tilePage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TilePageDeleteManyArgs>(
      args?: SelectSubset<T, TilePageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TilePages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TilePages
     * const tilePage = await prisma.tilePage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TilePageUpdateManyArgs>(
      args: SelectSubset<T, TilePageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TilePage.
     * @param {TilePageUpsertArgs} args - Arguments to update or create a TilePage.
     * @example
     * // Update or create a TilePage
     * const tilePage = await prisma.tilePage.upsert({
     *   create: {
     *     // ... data to create a TilePage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TilePage we want to update
     *   }
     * })
    **/
    upsert<T extends TilePageUpsertArgs>(
      args: SelectSubset<T, TilePageUpsertArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Find one TilePage that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TilePageFindUniqueOrThrowArgs} args - Arguments to find a TilePage
     * @example
     * // Get one TilePage
     * const tilePage = await prisma.tilePage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TilePageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TilePageFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Find the first TilePage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageFindFirstOrThrowArgs} args - Arguments to find a TilePage
     * @example
     * // Get one TilePage
     * const tilePage = await prisma.tilePage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TilePageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TilePageFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TilePageClient<TilePage>, Prisma__TilePageClient<TilePageGetPayload<T>>>

    /**
     * Count the number of TilePages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageCountArgs} args - Arguments to filter TilePages to count.
     * @example
     * // Count the number of TilePages
     * const count = await prisma.tilePage.count({
     *   where: {
     *     // ... the filter for the TilePages we want to count
     *   }
     * })
    **/
    count<T extends TilePageCountArgs>(
      args?: Subset<T, TilePageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TilePageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TilePage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TilePageAggregateArgs>(args: Subset<T, TilePageAggregateArgs>): PrismaPromise<GetTilePageAggregateType<T>>

    /**
     * Group by TilePage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TilePageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TilePageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TilePageGroupByArgs['orderBy'] }
        : { orderBy?: TilePageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TilePageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTilePageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TilePage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TilePageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | Null>, Prisma__ProjectClient<ProjectGetPayload<T> | Null>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    tiles<T extends TileFindManyArgs = {}>(args?: Subset<T, TileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tile>| Null>, PrismaPromise<Array<TileGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TilePage base type for findUnique actions
   */
  export type TilePageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * Filter, which TilePage to fetch.
     * 
    **/
    where: TilePageWhereUniqueInput
  }

  /**
   * TilePage: findUnique
   */
  export interface TilePageFindUniqueArgs extends TilePageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TilePage base type for findFirst actions
   */
  export type TilePageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * Filter, which TilePage to fetch.
     * 
    **/
    where?: TilePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TilePages to fetch.
     * 
    **/
    orderBy?: Enumerable<TilePageOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TilePages.
     * 
    **/
    cursor?: TilePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TilePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TilePages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TilePages.
     * 
    **/
    distinct?: Enumerable<TilePageScalarFieldEnum>
  }

  /**
   * TilePage: findFirst
   */
  export interface TilePageFindFirstArgs extends TilePageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TilePage findMany
   */
  export type TilePageFindManyArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * Filter, which TilePages to fetch.
     * 
    **/
    where?: TilePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TilePages to fetch.
     * 
    **/
    orderBy?: Enumerable<TilePageOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TilePages.
     * 
    **/
    cursor?: TilePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TilePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TilePages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TilePageScalarFieldEnum>
  }


  /**
   * TilePage create
   */
  export type TilePageCreateArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * The data needed to create a TilePage.
     * 
    **/
    data: XOR<TilePageCreateInput, TilePageUncheckedCreateInput>
  }


  /**
   * TilePage createMany
   */
  export type TilePageCreateManyArgs = {
    /**
     * The data used to create many TilePages.
     * 
    **/
    data: Enumerable<TilePageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TilePage update
   */
  export type TilePageUpdateArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * The data needed to update a TilePage.
     * 
    **/
    data: XOR<TilePageUpdateInput, TilePageUncheckedUpdateInput>
    /**
     * Choose, which TilePage to update.
     * 
    **/
    where: TilePageWhereUniqueInput
  }


  /**
   * TilePage updateMany
   */
  export type TilePageUpdateManyArgs = {
    /**
     * The data used to update TilePages.
     * 
    **/
    data: XOR<TilePageUpdateManyMutationInput, TilePageUncheckedUpdateManyInput>
    /**
     * Filter which TilePages to update
     * 
    **/
    where?: TilePageWhereInput
  }


  /**
   * TilePage upsert
   */
  export type TilePageUpsertArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * The filter to search for the TilePage to update in case it exists.
     * 
    **/
    where: TilePageWhereUniqueInput
    /**
     * In case the TilePage found by the `where` argument doesn't exist, create a new TilePage with this data.
     * 
    **/
    create: XOR<TilePageCreateInput, TilePageUncheckedCreateInput>
    /**
     * In case the TilePage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TilePageUpdateInput, TilePageUncheckedUpdateInput>
  }


  /**
   * TilePage delete
   */
  export type TilePageDeleteArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
    /**
     * Filter which TilePage to delete.
     * 
    **/
    where: TilePageWhereUniqueInput
  }


  /**
   * TilePage deleteMany
   */
  export type TilePageDeleteManyArgs = {
    /**
     * Filter which TilePages to delete
     * 
    **/
    where?: TilePageWhereInput
  }


  /**
   * TilePage: findUniqueOrThrow
   */
  export type TilePageFindUniqueOrThrowArgs = TilePageFindUniqueArgsBase
      

  /**
   * TilePage: findFirstOrThrow
   */
  export type TilePageFindFirstOrThrowArgs = TilePageFindFirstArgsBase
      

  /**
   * TilePage without action
   */
  export type TilePageArgs = {
    /**
     * Select specific fields to fetch from the TilePage
     * 
    **/
    select?: TilePageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TilePageInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    columns: number | null
    index: number | null
  }

  export type ProjectSumAggregateOutputType = {
    columns: number | null
    index: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    columns: number | null
    index: number | null
    public: boolean | null
    created_at: Date | null
    updated_at: Date | null
    userId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    image: string | null
    columns: number | null
    index: number | null
    public: boolean | null
    created_at: Date | null
    updated_at: Date | null
    userId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image: number
    columns: number
    index: number
    public: number
    created_at: number
    updated_at: number
    userId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    columns?: true
    index?: true
  }

  export type ProjectSumAggregateInputType = {
    columns?: true
    index?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    columns?: true
    index?: true
    public?: true
    created_at?: true
    updated_at?: true
    userId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    columns?: true
    index?: true
    public?: true
    created_at?: true
    updated_at?: true
    userId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image?: true
    columns?: true
    index?: true
    public?: true
    created_at?: true
    updated_at?: true
    userId?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: Array<ProjectScalarFieldEnum>
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    image: string | null
    columns: number
    index: number
    public: boolean
    created_at: Date
    updated_at: Date
    userId: string
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    columns?: boolean
    index?: boolean
    public?: boolean
    created_at?: boolean
    updated_at?: boolean
    userId?: boolean
    author?: boolean | UserArgs
    pages?: boolean | TilePageFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectInclude = {
    author?: boolean | UserArgs
    pages?: boolean | TilePageFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs,
    U = keyof S
      > = S extends true
        ? Project
    : S extends undefined
    ? never
    : S extends ProjectArgs | ProjectFindManyArgs
    ?'include' extends U
    ? Project  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'pages' ? Array < TilePageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'pages' ? Array < TilePageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Project ? Project[P] : never
  } 
    : Project
  : Project


  type ProjectCountArgs = Merge<
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }
  >

  export interface ProjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null, null>, Prisma__ProjectClient<ProjectGetPayload<T> | null, null>>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null, null>, Prisma__ProjectClient<ProjectGetPayload<T> | null, null>>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Find one Project that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    pages<T extends TilePageFindManyArgs = {}>(args?: Subset<T, TilePageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TilePage>| Null>, PrismaPromise<Array<TilePageGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where: ProjectWhereUniqueInput
  }

  /**
   * Project: findUnique
   */
  export interface ProjectFindUniqueArgs extends ProjectFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     * 
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }

  /**
   * Project: findFirst
   */
  export interface ProjectFindFirstArgs extends ProjectFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     * 
    **/
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     * 
    **/
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     * 
    **/
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     * 
    **/
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     * 
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     * 
    **/
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project: findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs = ProjectFindUniqueArgsBase
      

  /**
   * Project: findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs = ProjectFindFirstArgsBase
      

  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
  }



  /**
   * Model S3Resource
   */


  export type AggregateS3Resource = {
    _count: S3ResourceCountAggregateOutputType | null
    _avg: S3ResourceAvgAggregateOutputType | null
    _sum: S3ResourceSumAggregateOutputType | null
    _min: S3ResourceMinAggregateOutputType | null
    _max: S3ResourceMaxAggregateOutputType | null
  }

  export type S3ResourceAvgAggregateOutputType = {
    id: number | null
  }

  export type S3ResourceSumAggregateOutputType = {
    id: number | null
  }

  export type S3ResourceMinAggregateOutputType = {
    id: number | null
    url: string | null
    created_at: Date | null
    updated_at: Date | null
    userId: string | null
  }

  export type S3ResourceMaxAggregateOutputType = {
    id: number | null
    url: string | null
    created_at: Date | null
    updated_at: Date | null
    userId: string | null
  }

  export type S3ResourceCountAggregateOutputType = {
    id: number
    url: number
    created_at: number
    updated_at: number
    userId: number
    _all: number
  }


  export type S3ResourceAvgAggregateInputType = {
    id?: true
  }

  export type S3ResourceSumAggregateInputType = {
    id?: true
  }

  export type S3ResourceMinAggregateInputType = {
    id?: true
    url?: true
    created_at?: true
    updated_at?: true
    userId?: true
  }

  export type S3ResourceMaxAggregateInputType = {
    id?: true
    url?: true
    created_at?: true
    updated_at?: true
    userId?: true
  }

  export type S3ResourceCountAggregateInputType = {
    id?: true
    url?: true
    created_at?: true
    updated_at?: true
    userId?: true
    _all?: true
  }

  export type S3ResourceAggregateArgs = {
    /**
     * Filter which S3Resource to aggregate.
     * 
    **/
    where?: S3ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of S3Resources to fetch.
     * 
    **/
    orderBy?: Enumerable<S3ResourceOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: S3ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` S3Resources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` S3Resources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned S3Resources
    **/
    _count?: true | S3ResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: S3ResourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: S3ResourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: S3ResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: S3ResourceMaxAggregateInputType
  }

  export type GetS3ResourceAggregateType<T extends S3ResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateS3Resource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateS3Resource[P]>
      : GetScalarType<T[P], AggregateS3Resource[P]>
  }




  export type S3ResourceGroupByArgs = {
    where?: S3ResourceWhereInput
    orderBy?: Enumerable<S3ResourceOrderByWithAggregationInput>
    by: Array<S3ResourceScalarFieldEnum>
    having?: S3ResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: S3ResourceCountAggregateInputType | true
    _avg?: S3ResourceAvgAggregateInputType
    _sum?: S3ResourceSumAggregateInputType
    _min?: S3ResourceMinAggregateInputType
    _max?: S3ResourceMaxAggregateInputType
  }


  export type S3ResourceGroupByOutputType = {
    id: number
    url: string
    created_at: Date
    updated_at: Date
    userId: string
    _count: S3ResourceCountAggregateOutputType | null
    _avg: S3ResourceAvgAggregateOutputType | null
    _sum: S3ResourceSumAggregateOutputType | null
    _min: S3ResourceMinAggregateOutputType | null
    _max: S3ResourceMaxAggregateOutputType | null
  }

  type GetS3ResourceGroupByPayload<T extends S3ResourceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<S3ResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof S3ResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], S3ResourceGroupByOutputType[P]>
            : GetScalarType<T[P], S3ResourceGroupByOutputType[P]>
        }
      >
    >


  export type S3ResourceSelect = {
    id?: boolean
    url?: boolean
    created_at?: boolean
    updated_at?: boolean
    userId?: boolean
    author?: boolean | UserArgs
  }

  export type S3ResourceInclude = {
    author?: boolean | UserArgs
  }

  export type S3ResourceGetPayload<
    S extends boolean | null | undefined | S3ResourceArgs,
    U = keyof S
      > = S extends true
        ? S3Resource
    : S extends undefined
    ? never
    : S extends S3ResourceArgs | S3ResourceFindManyArgs
    ?'include' extends U
    ? S3Resource  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof S3Resource ? S3Resource[P] : never
  } 
    : S3Resource
  : S3Resource


  type S3ResourceCountArgs = Merge<
    Omit<S3ResourceFindManyArgs, 'select' | 'include'> & {
      select?: S3ResourceCountAggregateInputType | true
    }
  >

  export interface S3ResourceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one S3Resource that matches the filter.
     * @param {S3ResourceFindUniqueArgs} args - Arguments to find a S3Resource
     * @example
     * // Get one S3Resource
     * const s3Resource = await prisma.s3Resource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends S3ResourceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, S3ResourceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'S3Resource'> extends True ? CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>> : CheckSelect<T, Prisma__S3ResourceClient<S3Resource | null, null>, Prisma__S3ResourceClient<S3ResourceGetPayload<T> | null, null>>

    /**
     * Find the first S3Resource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceFindFirstArgs} args - Arguments to find a S3Resource
     * @example
     * // Get one S3Resource
     * const s3Resource = await prisma.s3Resource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends S3ResourceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, S3ResourceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'S3Resource'> extends True ? CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>> : CheckSelect<T, Prisma__S3ResourceClient<S3Resource | null, null>, Prisma__S3ResourceClient<S3ResourceGetPayload<T> | null, null>>

    /**
     * Find zero or more S3Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all S3Resources
     * const s3Resources = await prisma.s3Resource.findMany()
     * 
     * // Get first 10 S3Resources
     * const s3Resources = await prisma.s3Resource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const s3ResourceWithIdOnly = await prisma.s3Resource.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends S3ResourceFindManyArgs>(
      args?: SelectSubset<T, S3ResourceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<S3Resource>>, PrismaPromise<Array<S3ResourceGetPayload<T>>>>

    /**
     * Create a S3Resource.
     * @param {S3ResourceCreateArgs} args - Arguments to create a S3Resource.
     * @example
     * // Create one S3Resource
     * const S3Resource = await prisma.s3Resource.create({
     *   data: {
     *     // ... data to create a S3Resource
     *   }
     * })
     * 
    **/
    create<T extends S3ResourceCreateArgs>(
      args: SelectSubset<T, S3ResourceCreateArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Create many S3Resources.
     *     @param {S3ResourceCreateManyArgs} args - Arguments to create many S3Resources.
     *     @example
     *     // Create many S3Resources
     *     const s3Resource = await prisma.s3Resource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends S3ResourceCreateManyArgs>(
      args?: SelectSubset<T, S3ResourceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a S3Resource.
     * @param {S3ResourceDeleteArgs} args - Arguments to delete one S3Resource.
     * @example
     * // Delete one S3Resource
     * const S3Resource = await prisma.s3Resource.delete({
     *   where: {
     *     // ... filter to delete one S3Resource
     *   }
     * })
     * 
    **/
    delete<T extends S3ResourceDeleteArgs>(
      args: SelectSubset<T, S3ResourceDeleteArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Update one S3Resource.
     * @param {S3ResourceUpdateArgs} args - Arguments to update one S3Resource.
     * @example
     * // Update one S3Resource
     * const s3Resource = await prisma.s3Resource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends S3ResourceUpdateArgs>(
      args: SelectSubset<T, S3ResourceUpdateArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Delete zero or more S3Resources.
     * @param {S3ResourceDeleteManyArgs} args - Arguments to filter S3Resources to delete.
     * @example
     * // Delete a few S3Resources
     * const { count } = await prisma.s3Resource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends S3ResourceDeleteManyArgs>(
      args?: SelectSubset<T, S3ResourceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more S3Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many S3Resources
     * const s3Resource = await prisma.s3Resource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends S3ResourceUpdateManyArgs>(
      args: SelectSubset<T, S3ResourceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one S3Resource.
     * @param {S3ResourceUpsertArgs} args - Arguments to update or create a S3Resource.
     * @example
     * // Update or create a S3Resource
     * const s3Resource = await prisma.s3Resource.upsert({
     *   create: {
     *     // ... data to create a S3Resource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the S3Resource we want to update
     *   }
     * })
    **/
    upsert<T extends S3ResourceUpsertArgs>(
      args: SelectSubset<T, S3ResourceUpsertArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Find one S3Resource that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {S3ResourceFindUniqueOrThrowArgs} args - Arguments to find a S3Resource
     * @example
     * // Get one S3Resource
     * const s3Resource = await prisma.s3Resource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends S3ResourceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, S3ResourceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Find the first S3Resource that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceFindFirstOrThrowArgs} args - Arguments to find a S3Resource
     * @example
     * // Get one S3Resource
     * const s3Resource = await prisma.s3Resource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends S3ResourceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, S3ResourceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__S3ResourceClient<S3Resource>, Prisma__S3ResourceClient<S3ResourceGetPayload<T>>>

    /**
     * Count the number of S3Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceCountArgs} args - Arguments to filter S3Resources to count.
     * @example
     * // Count the number of S3Resources
     * const count = await prisma.s3Resource.count({
     *   where: {
     *     // ... the filter for the S3Resources we want to count
     *   }
     * })
    **/
    count<T extends S3ResourceCountArgs>(
      args?: Subset<T, S3ResourceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], S3ResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a S3Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends S3ResourceAggregateArgs>(args: Subset<T, S3ResourceAggregateArgs>): PrismaPromise<GetS3ResourceAggregateType<T>>

    /**
     * Group by S3Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {S3ResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends S3ResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: S3ResourceGroupByArgs['orderBy'] }
        : { orderBy?: S3ResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, S3ResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetS3ResourceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for S3Resource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__S3ResourceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * S3Resource base type for findUnique actions
   */
  export type S3ResourceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * Filter, which S3Resource to fetch.
     * 
    **/
    where: S3ResourceWhereUniqueInput
  }

  /**
   * S3Resource: findUnique
   */
  export interface S3ResourceFindUniqueArgs extends S3ResourceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * S3Resource base type for findFirst actions
   */
  export type S3ResourceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * Filter, which S3Resource to fetch.
     * 
    **/
    where?: S3ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of S3Resources to fetch.
     * 
    **/
    orderBy?: Enumerable<S3ResourceOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for S3Resources.
     * 
    **/
    cursor?: S3ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` S3Resources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` S3Resources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of S3Resources.
     * 
    **/
    distinct?: Enumerable<S3ResourceScalarFieldEnum>
  }

  /**
   * S3Resource: findFirst
   */
  export interface S3ResourceFindFirstArgs extends S3ResourceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * S3Resource findMany
   */
  export type S3ResourceFindManyArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * Filter, which S3Resources to fetch.
     * 
    **/
    where?: S3ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of S3Resources to fetch.
     * 
    **/
    orderBy?: Enumerable<S3ResourceOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing S3Resources.
     * 
    **/
    cursor?: S3ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` S3Resources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` S3Resources.
     * 
    **/
    skip?: number
    distinct?: Enumerable<S3ResourceScalarFieldEnum>
  }


  /**
   * S3Resource create
   */
  export type S3ResourceCreateArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * The data needed to create a S3Resource.
     * 
    **/
    data: XOR<S3ResourceCreateInput, S3ResourceUncheckedCreateInput>
  }


  /**
   * S3Resource createMany
   */
  export type S3ResourceCreateManyArgs = {
    /**
     * The data used to create many S3Resources.
     * 
    **/
    data: Enumerable<S3ResourceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * S3Resource update
   */
  export type S3ResourceUpdateArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * The data needed to update a S3Resource.
     * 
    **/
    data: XOR<S3ResourceUpdateInput, S3ResourceUncheckedUpdateInput>
    /**
     * Choose, which S3Resource to update.
     * 
    **/
    where: S3ResourceWhereUniqueInput
  }


  /**
   * S3Resource updateMany
   */
  export type S3ResourceUpdateManyArgs = {
    /**
     * The data used to update S3Resources.
     * 
    **/
    data: XOR<S3ResourceUpdateManyMutationInput, S3ResourceUncheckedUpdateManyInput>
    /**
     * Filter which S3Resources to update
     * 
    **/
    where?: S3ResourceWhereInput
  }


  /**
   * S3Resource upsert
   */
  export type S3ResourceUpsertArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * The filter to search for the S3Resource to update in case it exists.
     * 
    **/
    where: S3ResourceWhereUniqueInput
    /**
     * In case the S3Resource found by the `where` argument doesn't exist, create a new S3Resource with this data.
     * 
    **/
    create: XOR<S3ResourceCreateInput, S3ResourceUncheckedCreateInput>
    /**
     * In case the S3Resource was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<S3ResourceUpdateInput, S3ResourceUncheckedUpdateInput>
  }


  /**
   * S3Resource delete
   */
  export type S3ResourceDeleteArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
    /**
     * Filter which S3Resource to delete.
     * 
    **/
    where: S3ResourceWhereUniqueInput
  }


  /**
   * S3Resource deleteMany
   */
  export type S3ResourceDeleteManyArgs = {
    /**
     * Filter which S3Resources to delete
     * 
    **/
    where?: S3ResourceWhereInput
  }


  /**
   * S3Resource: findUniqueOrThrow
   */
  export type S3ResourceFindUniqueOrThrowArgs = S3ResourceFindUniqueArgsBase
      

  /**
   * S3Resource: findFirstOrThrow
   */
  export type S3ResourceFindFirstOrThrowArgs = S3ResourceFindFirstArgsBase
      

  /**
   * S3Resource without action
   */
  export type S3ResourceArgs = {
    /**
     * Select specific fields to fetch from the S3Resource
     * 
    **/
    select?: S3ResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: S3ResourceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccessTokenOrderByRelevanceFieldEnum: {
    id: 'id',
    access_token: 'access_token',
    userId: 'userId'
  };

  export type AccessTokenOrderByRelevanceFieldEnum = (typeof AccessTokenOrderByRelevanceFieldEnum)[keyof typeof AccessTokenOrderByRelevanceFieldEnum]


  export const AccessTokenScalarFieldEnum: {
    id: 'id',
    access_token: 'access_token',
    userId: 'userId'
  };

  export type AccessTokenScalarFieldEnum = (typeof AccessTokenScalarFieldEnum)[keyof typeof AccessTokenScalarFieldEnum]


  export const OrganizationOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type OrganizationOrderByRelevanceFieldEnum = (typeof OrganizationOrderByRelevanceFieldEnum)[keyof typeof OrganizationOrderByRelevanceFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const ProjectOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    userId: 'userId'
  };

  export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image: 'image',
    columns: 'columns',
    index: 'index',
    public: 'public',
    created_at: 'created_at',
    updated_at: 'updated_at',
    userId: 'userId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const S3ResourceOrderByRelevanceFieldEnum: {
    url: 'url',
    userId: 'userId'
  };

  export type S3ResourceOrderByRelevanceFieldEnum = (typeof S3ResourceOrderByRelevanceFieldEnum)[keyof typeof S3ResourceOrderByRelevanceFieldEnum]


  export const S3ResourceScalarFieldEnum: {
    id: 'id',
    url: 'url',
    created_at: 'created_at',
    updated_at: 'updated_at',
    userId: 'userId'
  };

  export type S3ResourceScalarFieldEnum = (typeof S3ResourceScalarFieldEnum)[keyof typeof S3ResourceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TileOrderByRelevanceFieldEnum: {
    id: 'id',
    link_id: 'link_id',
    display_text: 'display_text',
    speak_text: 'speak_text',
    image: 'image',
    modifier: 'modifier',
    background_color: 'background_color',
    border_color: 'border_color',
    text_color: 'text_color',
    userId: 'userId',
    conjugations: 'conjugations'
  };

  export type TileOrderByRelevanceFieldEnum = (typeof TileOrderByRelevanceFieldEnum)[keyof typeof TileOrderByRelevanceFieldEnum]


  export const TilePageOrderByRelevanceFieldEnum: {
    name: 'name',
    user_id: 'user_id',
    projectId: 'projectId'
  };

  export type TilePageOrderByRelevanceFieldEnum = (typeof TilePageOrderByRelevanceFieldEnum)[keyof typeof TilePageOrderByRelevanceFieldEnum]


  export const TilePageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    user_id: 'user_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    projectId: 'projectId'
  };

  export type TilePageScalarFieldEnum = (typeof TilePageScalarFieldEnum)[keyof typeof TilePageScalarFieldEnum]


  export const TileScalarFieldEnum: {
    id: 'id',
    tile_index: 'tile_index',
    tap_count: 'tap_count',
    link_id: 'link_id',
    display_text: 'display_text',
    speak_text: 'speak_text',
    image: 'image',
    navigation_page_id: 'navigation_page_id',
    modifier: 'modifier',
    background_color: 'background_color',
    border_color: 'border_color',
    text_color: 'text_color',
    is_silent: 'is_silent',
    is_invisible: 'is_invisible',
    is_accented: 'is_accented',
    created_at: 'created_at',
    updated_at: 'updated_at',
    tilePageId: 'tilePageId',
    userId: 'userId',
    conjugations: 'conjugations'
  };

  export type TileScalarFieldEnum = (typeof TileScalarFieldEnum)[keyof typeof TileScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    identifier_token: 'identifier_token',
    email: 'email',
    name: 'name',
    image: 'image',
    hashed_password: 'hashed_password',
    theme: 'theme',
    organizationId: 'organizationId'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    identifier_token: 'identifier_token',
    email: 'email',
    name: 'name',
    image: 'image',
    hashed_password: 'hashed_password',
    theme: 'theme',
    organizationId: 'organizationId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    identifier_token?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    hashed_password?: StringNullableFilter | string | null
    theme?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    access_tokens?: AccessTokenListRelationFilter
    s3_resources?: S3ResourceListRelationFilter
    projects?: ProjectListRelationFilter
    tiles?: TileListRelationFilter
    tile_pages?: TilePageListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    identifier_token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    hashed_password?: SortOrder
    theme?: SortOrder
    organizationId?: SortOrder
    organization?: OrganizationOrderByWithRelationAndSearchRelevanceInput
    access_tokens?: AccessTokenOrderByRelationAggregateInput
    s3_resources?: S3ResourceOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    tiles?: TileOrderByRelationAggregateInput
    tile_pages?: TilePageOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    identifier_token?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    identifier_token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    hashed_password?: SortOrder
    theme?: SortOrder
    organizationId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    identifier_token?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    hashed_password?: StringNullableWithAggregatesFilter | string | null
    theme?: StringNullableWithAggregatesFilter | string | null
    organizationId?: StringNullableWithAggregatesFilter | string | null
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    Users?: UserListRelationFilter
  }

  export type OrganizationOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    Users?: UserOrderByRelationAggregateInput
    _relevance?: OrganizationOrderByRelevanceInput
  }

  export type OrganizationWhereUniqueInput = {
    id?: string
  }

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type AccessTokenWhereInput = {
    AND?: Enumerable<AccessTokenWhereInput>
    OR?: Enumerable<AccessTokenWhereInput>
    NOT?: Enumerable<AccessTokenWhereInput>
    id?: StringFilter | string
    access_token?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccessTokenOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    access_token?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: AccessTokenOrderByRelevanceInput
  }

  export type AccessTokenWhereUniqueInput = {
    id?: string
    access_token?: string
  }

  export type AccessTokenOrderByWithAggregationInput = {
    id?: SortOrder
    access_token?: SortOrder
    userId?: SortOrder
    _count?: AccessTokenCountOrderByAggregateInput
    _max?: AccessTokenMaxOrderByAggregateInput
    _min?: AccessTokenMinOrderByAggregateInput
  }

  export type AccessTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccessTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccessTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccessTokenScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    access_token?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type TileWhereInput = {
    AND?: Enumerable<TileWhereInput>
    OR?: Enumerable<TileWhereInput>
    NOT?: Enumerable<TileWhereInput>
    id?: StringFilter | string
    tile_index?: IntFilter | number
    tap_count?: IntFilter | number
    link_id?: StringNullableFilter | string | null
    display_text?: StringNullableFilter | string | null
    speak_text?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    navigation_page_id?: IntNullableFilter | number | null
    modifier?: StringNullableFilter | string | null
    background_color?: StringNullableFilter | string | null
    border_color?: StringNullableFilter | string | null
    text_color?: StringNullableFilter | string | null
    is_silent?: BoolFilter | boolean
    is_invisible?: BoolFilter | boolean
    is_accented?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    tilePageId?: IntNullableFilter | number | null
    userId?: StringFilter | string
    conjugations?: StringNullableListFilter
    parent_page?: XOR<TilePageRelationFilter, TilePageWhereInput> | null
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TileOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    tile_index?: SortOrder
    tap_count?: SortOrder
    link_id?: SortOrder
    display_text?: SortOrder
    speak_text?: SortOrder
    image?: SortOrder
    navigation_page_id?: SortOrder
    modifier?: SortOrder
    background_color?: SortOrder
    border_color?: SortOrder
    text_color?: SortOrder
    is_silent?: SortOrder
    is_invisible?: SortOrder
    is_accented?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tilePageId?: SortOrder
    userId?: SortOrder
    conjugations?: SortOrder
    parent_page?: TilePageOrderByWithRelationAndSearchRelevanceInput
    author?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: TileOrderByRelevanceInput
  }

  export type TileWhereUniqueInput = {
    id?: string
  }

  export type TileOrderByWithAggregationInput = {
    id?: SortOrder
    tile_index?: SortOrder
    tap_count?: SortOrder
    link_id?: SortOrder
    display_text?: SortOrder
    speak_text?: SortOrder
    image?: SortOrder
    navigation_page_id?: SortOrder
    modifier?: SortOrder
    background_color?: SortOrder
    border_color?: SortOrder
    text_color?: SortOrder
    is_silent?: SortOrder
    is_invisible?: SortOrder
    is_accented?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tilePageId?: SortOrder
    userId?: SortOrder
    conjugations?: SortOrder
    _count?: TileCountOrderByAggregateInput
    _avg?: TileAvgOrderByAggregateInput
    _max?: TileMaxOrderByAggregateInput
    _min?: TileMinOrderByAggregateInput
    _sum?: TileSumOrderByAggregateInput
  }

  export type TileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TileScalarWhereWithAggregatesInput>
    OR?: Enumerable<TileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    tile_index?: IntWithAggregatesFilter | number
    tap_count?: IntWithAggregatesFilter | number
    link_id?: StringNullableWithAggregatesFilter | string | null
    display_text?: StringNullableWithAggregatesFilter | string | null
    speak_text?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    navigation_page_id?: IntNullableWithAggregatesFilter | number | null
    modifier?: StringNullableWithAggregatesFilter | string | null
    background_color?: StringNullableWithAggregatesFilter | string | null
    border_color?: StringNullableWithAggregatesFilter | string | null
    text_color?: StringNullableWithAggregatesFilter | string | null
    is_silent?: BoolWithAggregatesFilter | boolean
    is_invisible?: BoolWithAggregatesFilter | boolean
    is_accented?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    tilePageId?: IntNullableWithAggregatesFilter | number | null
    userId?: StringWithAggregatesFilter | string
    conjugations?: StringNullableListFilter
  }

  export type TilePageWhereInput = {
    AND?: Enumerable<TilePageWhereInput>
    OR?: Enumerable<TilePageWhereInput>
    NOT?: Enumerable<TilePageWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    user_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    projectId?: StringNullableFilter | string | null
    Project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    tiles?: TileListRelationFilter
  }

  export type TilePageOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    projectId?: SortOrder
    Project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    tiles?: TileOrderByRelationAggregateInput
    _relevance?: TilePageOrderByRelevanceInput
  }

  export type TilePageWhereUniqueInput = {
    id?: number
  }

  export type TilePageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    projectId?: SortOrder
    _count?: TilePageCountOrderByAggregateInput
    _avg?: TilePageAvgOrderByAggregateInput
    _max?: TilePageMaxOrderByAggregateInput
    _min?: TilePageMinOrderByAggregateInput
    _sum?: TilePageSumOrderByAggregateInput
  }

  export type TilePageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TilePageScalarWhereWithAggregatesInput>
    OR?: Enumerable<TilePageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TilePageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    projectId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    columns?: IntFilter | number
    index?: IntFilter | number
    public?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    pages?: TilePageListRelationFilter
  }

  export type ProjectOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    columns?: SortOrder
    index?: SortOrder
    public?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    author?: UserOrderByWithRelationAndSearchRelevanceInput
    pages?: TilePageOrderByRelationAggregateInput
    _relevance?: ProjectOrderByRelevanceInput
  }

  export type ProjectWhereUniqueInput = {
    id?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    columns?: SortOrder
    index?: SortOrder
    public?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    columns?: IntWithAggregatesFilter | number
    index?: IntWithAggregatesFilter | number
    public?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type S3ResourceWhereInput = {
    AND?: Enumerable<S3ResourceWhereInput>
    OR?: Enumerable<S3ResourceWhereInput>
    NOT?: Enumerable<S3ResourceWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type S3ResourceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    author?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: S3ResourceOrderByRelevanceInput
  }

  export type S3ResourceWhereUniqueInput = {
    id?: number
  }

  export type S3ResourceOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
    _count?: S3ResourceCountOrderByAggregateInput
    _avg?: S3ResourceAvgOrderByAggregateInput
    _max?: S3ResourceMaxOrderByAggregateInput
    _min?: S3ResourceMinOrderByAggregateInput
    _sum?: S3ResourceSumOrderByAggregateInput
  }

  export type S3ResourceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<S3ResourceScalarWhereWithAggregatesInput>
    OR?: Enumerable<S3ResourceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<S3ResourceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    Users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    Users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenCreateInput = {
    id?: string
    access_token?: string
    user: UserCreateNestedOneWithoutAccess_tokensInput
  }

  export type AccessTokenUncheckedCreateInput = {
    id?: string
    access_token?: string
    userId: string
  }

  export type AccessTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAccess_tokensNestedInput
  }

  export type AccessTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenCreateManyInput = {
    id?: string
    access_token?: string
    userId: string
  }

  export type AccessTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TileCreateInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
    parent_page?: TilePageCreateNestedOneWithoutTilesInput
    author: UserCreateNestedOneWithoutTilesInput
  }

  export type TileUncheckedCreateInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    tilePageId?: number | null
    userId: string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
    parent_page?: TilePageUpdateOneWithoutTilesNestedInput
    author?: UserUpdateOneRequiredWithoutTilesNestedInput
  }

  export type TileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tilePageId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TileCreateManyInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    tilePageId?: number | null
    userId: string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tilePageId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TilePageCreateInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    Project?: ProjectCreateNestedOneWithoutPagesInput
    user: UserCreateNestedOneWithoutTile_pagesInput
    tiles?: TileCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageUncheckedCreateInput = {
    id?: number
    name: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
    projectId?: string | null
    tiles?: TileUncheckedCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Project?: ProjectUpdateOneWithoutPagesNestedInput
    user?: UserUpdateOneRequiredWithoutTile_pagesNestedInput
    tiles?: TileUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    tiles?: TileUncheckedUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageCreateManyInput = {
    id?: number
    name: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
    projectId?: string | null
  }

  export type TilePageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TilePageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    author: UserCreateNestedOneWithoutProjectsInput
    pages?: TilePageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
    pages?: TilePageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutProjectsNestedInput
    pages?: TilePageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pages?: TilePageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type S3ResourceCreateInput = {
    url: string
    created_at?: Date | string
    updated_at?: Date | string
    author: UserCreateNestedOneWithoutS3_resourcesInput
  }

  export type S3ResourceUncheckedCreateInput = {
    id?: number
    url: string
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
  }

  export type S3ResourceUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutS3_resourcesNestedInput
  }

  export type S3ResourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type S3ResourceCreateManyInput = {
    id?: number
    url: string
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
  }

  export type S3ResourceUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type S3ResourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type AccessTokenListRelationFilter = {
    every?: AccessTokenWhereInput
    some?: AccessTokenWhereInput
    none?: AccessTokenWhereInput
  }

  export type S3ResourceListRelationFilter = {
    every?: S3ResourceWhereInput
    some?: S3ResourceWhereInput
    none?: S3ResourceWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type TileListRelationFilter = {
    every?: TileWhereInput
    some?: TileWhereInput
    none?: TileWhereInput
  }

  export type TilePageListRelationFilter = {
    every?: TilePageWhereInput
    some?: TilePageWhereInput
    none?: TilePageWhereInput
  }

  export type AccessTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type S3ResourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TilePageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: Enumerable<UserOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    identifier_token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    hashed_password?: SortOrder
    theme?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier_token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    hashed_password?: SortOrder
    theme?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    identifier_token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    hashed_password?: SortOrder
    theme?: SortOrder
    organizationId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationOrderByRelevanceInput = {
    fields: Enumerable<OrganizationOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccessTokenOrderByRelevanceInput = {
    fields: Enumerable<AccessTokenOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type AccessTokenCountOrderByAggregateInput = {
    id?: SortOrder
    access_token?: SortOrder
    userId?: SortOrder
  }

  export type AccessTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    access_token?: SortOrder
    userId?: SortOrder
  }

  export type AccessTokenMinOrderByAggregateInput = {
    id?: SortOrder
    access_token?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type TilePageRelationFilter = {
    is?: TilePageWhereInput | null
    isNot?: TilePageWhereInput | null
  }

  export type TileOrderByRelevanceInput = {
    fields: Enumerable<TileOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type TileCountOrderByAggregateInput = {
    id?: SortOrder
    tile_index?: SortOrder
    tap_count?: SortOrder
    link_id?: SortOrder
    display_text?: SortOrder
    speak_text?: SortOrder
    image?: SortOrder
    navigation_page_id?: SortOrder
    modifier?: SortOrder
    background_color?: SortOrder
    border_color?: SortOrder
    text_color?: SortOrder
    is_silent?: SortOrder
    is_invisible?: SortOrder
    is_accented?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tilePageId?: SortOrder
    userId?: SortOrder
    conjugations?: SortOrder
  }

  export type TileAvgOrderByAggregateInput = {
    tile_index?: SortOrder
    tap_count?: SortOrder
    navigation_page_id?: SortOrder
    tilePageId?: SortOrder
  }

  export type TileMaxOrderByAggregateInput = {
    id?: SortOrder
    tile_index?: SortOrder
    tap_count?: SortOrder
    link_id?: SortOrder
    display_text?: SortOrder
    speak_text?: SortOrder
    image?: SortOrder
    navigation_page_id?: SortOrder
    modifier?: SortOrder
    background_color?: SortOrder
    border_color?: SortOrder
    text_color?: SortOrder
    is_silent?: SortOrder
    is_invisible?: SortOrder
    is_accented?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tilePageId?: SortOrder
    userId?: SortOrder
  }

  export type TileMinOrderByAggregateInput = {
    id?: SortOrder
    tile_index?: SortOrder
    tap_count?: SortOrder
    link_id?: SortOrder
    display_text?: SortOrder
    speak_text?: SortOrder
    image?: SortOrder
    navigation_page_id?: SortOrder
    modifier?: SortOrder
    background_color?: SortOrder
    border_color?: SortOrder
    text_color?: SortOrder
    is_silent?: SortOrder
    is_invisible?: SortOrder
    is_accented?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tilePageId?: SortOrder
    userId?: SortOrder
  }

  export type TileSumOrderByAggregateInput = {
    tile_index?: SortOrder
    tap_count?: SortOrder
    navigation_page_id?: SortOrder
    tilePageId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type TilePageOrderByRelevanceInput = {
    fields: Enumerable<TilePageOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type TilePageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    projectId?: SortOrder
  }

  export type TilePageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TilePageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    projectId?: SortOrder
  }

  export type TilePageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    projectId?: SortOrder
  }

  export type TilePageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectOrderByRelevanceInput = {
    fields: Enumerable<ProjectOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    columns?: SortOrder
    index?: SortOrder
    public?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    columns?: SortOrder
    index?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    columns?: SortOrder
    index?: SortOrder
    public?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    columns?: SortOrder
    index?: SortOrder
    public?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    columns?: SortOrder
    index?: SortOrder
  }

  export type S3ResourceOrderByRelevanceInput = {
    fields: Enumerable<S3ResourceOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type S3ResourceCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type S3ResourceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type S3ResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type S3ResourceMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    userId?: SortOrder
  }

  export type S3ResourceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type AccessTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccessTokenCreateWithoutUserInput>, Enumerable<AccessTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccessTokenCreateOrConnectWithoutUserInput>
    createMany?: AccessTokenCreateManyUserInputEnvelope
    connect?: Enumerable<AccessTokenWhereUniqueInput>
  }

  export type S3ResourceCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<S3ResourceCreateWithoutAuthorInput>, Enumerable<S3ResourceUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<S3ResourceCreateOrConnectWithoutAuthorInput>
    createMany?: S3ResourceCreateManyAuthorInputEnvelope
    connect?: Enumerable<S3ResourceWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAuthorInput>, Enumerable<ProjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAuthorInput>
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type TileCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<TileCreateWithoutAuthorInput>, Enumerable<TileUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutAuthorInput>
    createMany?: TileCreateManyAuthorInputEnvelope
    connect?: Enumerable<TileWhereUniqueInput>
  }

  export type TilePageCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutUserInput>, Enumerable<TilePageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutUserInput>
    createMany?: TilePageCreateManyUserInputEnvelope
    connect?: Enumerable<TilePageWhereUniqueInput>
  }

  export type AccessTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccessTokenCreateWithoutUserInput>, Enumerable<AccessTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccessTokenCreateOrConnectWithoutUserInput>
    createMany?: AccessTokenCreateManyUserInputEnvelope
    connect?: Enumerable<AccessTokenWhereUniqueInput>
  }

  export type S3ResourceUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<S3ResourceCreateWithoutAuthorInput>, Enumerable<S3ResourceUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<S3ResourceCreateOrConnectWithoutAuthorInput>
    createMany?: S3ResourceCreateManyAuthorInputEnvelope
    connect?: Enumerable<S3ResourceWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAuthorInput>, Enumerable<ProjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAuthorInput>
    createMany?: ProjectCreateManyAuthorInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type TileUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<TileCreateWithoutAuthorInput>, Enumerable<TileUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutAuthorInput>
    createMany?: TileCreateManyAuthorInputEnvelope
    connect?: Enumerable<TileWhereUniqueInput>
  }

  export type TilePageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutUserInput>, Enumerable<TilePageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutUserInput>
    createMany?: TilePageCreateManyUserInputEnvelope
    connect?: Enumerable<TilePageWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OrganizationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type AccessTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccessTokenCreateWithoutUserInput>, Enumerable<AccessTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccessTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccessTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccessTokenCreateManyUserInputEnvelope
    set?: Enumerable<AccessTokenWhereUniqueInput>
    disconnect?: Enumerable<AccessTokenWhereUniqueInput>
    delete?: Enumerable<AccessTokenWhereUniqueInput>
    connect?: Enumerable<AccessTokenWhereUniqueInput>
    update?: Enumerable<AccessTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccessTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccessTokenScalarWhereInput>
  }

  export type S3ResourceUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<S3ResourceCreateWithoutAuthorInput>, Enumerable<S3ResourceUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<S3ResourceCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<S3ResourceUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: S3ResourceCreateManyAuthorInputEnvelope
    set?: Enumerable<S3ResourceWhereUniqueInput>
    disconnect?: Enumerable<S3ResourceWhereUniqueInput>
    delete?: Enumerable<S3ResourceWhereUniqueInput>
    connect?: Enumerable<S3ResourceWhereUniqueInput>
    update?: Enumerable<S3ResourceUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<S3ResourceUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<S3ResourceScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAuthorInput>, Enumerable<ProjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type TileUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<TileCreateWithoutAuthorInput>, Enumerable<TileUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<TileUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: TileCreateManyAuthorInputEnvelope
    set?: Enumerable<TileWhereUniqueInput>
    disconnect?: Enumerable<TileWhereUniqueInput>
    delete?: Enumerable<TileWhereUniqueInput>
    connect?: Enumerable<TileWhereUniqueInput>
    update?: Enumerable<TileUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<TileUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<TileScalarWhereInput>
  }

  export type TilePageUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutUserInput>, Enumerable<TilePageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TilePageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TilePageCreateManyUserInputEnvelope
    set?: Enumerable<TilePageWhereUniqueInput>
    disconnect?: Enumerable<TilePageWhereUniqueInput>
    delete?: Enumerable<TilePageWhereUniqueInput>
    connect?: Enumerable<TilePageWhereUniqueInput>
    update?: Enumerable<TilePageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TilePageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TilePageScalarWhereInput>
  }

  export type AccessTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccessTokenCreateWithoutUserInput>, Enumerable<AccessTokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccessTokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccessTokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccessTokenCreateManyUserInputEnvelope
    set?: Enumerable<AccessTokenWhereUniqueInput>
    disconnect?: Enumerable<AccessTokenWhereUniqueInput>
    delete?: Enumerable<AccessTokenWhereUniqueInput>
    connect?: Enumerable<AccessTokenWhereUniqueInput>
    update?: Enumerable<AccessTokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccessTokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccessTokenScalarWhereInput>
  }

  export type S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<S3ResourceCreateWithoutAuthorInput>, Enumerable<S3ResourceUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<S3ResourceCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<S3ResourceUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: S3ResourceCreateManyAuthorInputEnvelope
    set?: Enumerable<S3ResourceWhereUniqueInput>
    disconnect?: Enumerable<S3ResourceWhereUniqueInput>
    delete?: Enumerable<S3ResourceWhereUniqueInput>
    connect?: Enumerable<S3ResourceWhereUniqueInput>
    update?: Enumerable<S3ResourceUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<S3ResourceUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<S3ResourceScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAuthorInput>, Enumerable<ProjectUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ProjectCreateManyAuthorInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type TileUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<TileCreateWithoutAuthorInput>, Enumerable<TileUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<TileUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: TileCreateManyAuthorInputEnvelope
    set?: Enumerable<TileWhereUniqueInput>
    disconnect?: Enumerable<TileWhereUniqueInput>
    delete?: Enumerable<TileWhereUniqueInput>
    connect?: Enumerable<TileWhereUniqueInput>
    update?: Enumerable<TileUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<TileUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<TileScalarWhereInput>
  }

  export type TilePageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutUserInput>, Enumerable<TilePageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TilePageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TilePageCreateManyUserInputEnvelope
    set?: Enumerable<TilePageWhereUniqueInput>
    disconnect?: Enumerable<TilePageWhereUniqueInput>
    delete?: Enumerable<TilePageWhereUniqueInput>
    connect?: Enumerable<TilePageWhereUniqueInput>
    update?: Enumerable<TilePageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TilePageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TilePageScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccess_tokensInput = {
    create?: XOR<UserCreateWithoutAccess_tokensInput, UserUncheckedCreateWithoutAccess_tokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccess_tokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccess_tokensNestedInput = {
    create?: XOR<UserCreateWithoutAccess_tokensInput, UserUncheckedCreateWithoutAccess_tokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccess_tokensInput
    upsert?: UserUpsertWithoutAccess_tokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccess_tokensInput, UserUncheckedUpdateWithoutAccess_tokensInput>
  }

  export type TileCreateconjugationsInput = {
    set: Enumerable<string>
  }

  export type TilePageCreateNestedOneWithoutTilesInput = {
    create?: XOR<TilePageCreateWithoutTilesInput, TilePageUncheckedCreateWithoutTilesInput>
    connectOrCreate?: TilePageCreateOrConnectWithoutTilesInput
    connect?: TilePageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTilesInput = {
    create?: XOR<UserCreateWithoutTilesInput, UserUncheckedCreateWithoutTilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTilesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TileUpdateconjugationsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type TilePageUpdateOneWithoutTilesNestedInput = {
    create?: XOR<TilePageCreateWithoutTilesInput, TilePageUncheckedCreateWithoutTilesInput>
    connectOrCreate?: TilePageCreateOrConnectWithoutTilesInput
    upsert?: TilePageUpsertWithoutTilesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TilePageWhereUniqueInput
    update?: XOR<TilePageUpdateWithoutTilesInput, TilePageUncheckedUpdateWithoutTilesInput>
  }

  export type UserUpdateOneRequiredWithoutTilesNestedInput = {
    create?: XOR<UserCreateWithoutTilesInput, UserUncheckedCreateWithoutTilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTilesInput
    upsert?: UserUpsertWithoutTilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTilesInput, UserUncheckedUpdateWithoutTilesInput>
  }

  export type ProjectCreateNestedOneWithoutPagesInput = {
    create?: XOR<ProjectCreateWithoutPagesInput, ProjectUncheckedCreateWithoutPagesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPagesInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTile_pagesInput = {
    create?: XOR<UserCreateWithoutTile_pagesInput, UserUncheckedCreateWithoutTile_pagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTile_pagesInput
    connect?: UserWhereUniqueInput
  }

  export type TileCreateNestedManyWithoutParent_pageInput = {
    create?: XOR<Enumerable<TileCreateWithoutParent_pageInput>, Enumerable<TileUncheckedCreateWithoutParent_pageInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutParent_pageInput>
    createMany?: TileCreateManyParent_pageInputEnvelope
    connect?: Enumerable<TileWhereUniqueInput>
  }

  export type TileUncheckedCreateNestedManyWithoutParent_pageInput = {
    create?: XOR<Enumerable<TileCreateWithoutParent_pageInput>, Enumerable<TileUncheckedCreateWithoutParent_pageInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutParent_pageInput>
    createMany?: TileCreateManyParent_pageInputEnvelope
    connect?: Enumerable<TileWhereUniqueInput>
  }

  export type ProjectUpdateOneWithoutPagesNestedInput = {
    create?: XOR<ProjectCreateWithoutPagesInput, ProjectUncheckedCreateWithoutPagesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPagesInput
    upsert?: ProjectUpsertWithoutPagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutPagesInput, ProjectUncheckedUpdateWithoutPagesInput>
  }

  export type UserUpdateOneRequiredWithoutTile_pagesNestedInput = {
    create?: XOR<UserCreateWithoutTile_pagesInput, UserUncheckedCreateWithoutTile_pagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTile_pagesInput
    upsert?: UserUpsertWithoutTile_pagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTile_pagesInput, UserUncheckedUpdateWithoutTile_pagesInput>
  }

  export type TileUpdateManyWithoutParent_pageNestedInput = {
    create?: XOR<Enumerable<TileCreateWithoutParent_pageInput>, Enumerable<TileUncheckedCreateWithoutParent_pageInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutParent_pageInput>
    upsert?: Enumerable<TileUpsertWithWhereUniqueWithoutParent_pageInput>
    createMany?: TileCreateManyParent_pageInputEnvelope
    set?: Enumerable<TileWhereUniqueInput>
    disconnect?: Enumerable<TileWhereUniqueInput>
    delete?: Enumerable<TileWhereUniqueInput>
    connect?: Enumerable<TileWhereUniqueInput>
    update?: Enumerable<TileUpdateWithWhereUniqueWithoutParent_pageInput>
    updateMany?: Enumerable<TileUpdateManyWithWhereWithoutParent_pageInput>
    deleteMany?: Enumerable<TileScalarWhereInput>
  }

  export type TileUncheckedUpdateManyWithoutParent_pageNestedInput = {
    create?: XOR<Enumerable<TileCreateWithoutParent_pageInput>, Enumerable<TileUncheckedCreateWithoutParent_pageInput>>
    connectOrCreate?: Enumerable<TileCreateOrConnectWithoutParent_pageInput>
    upsert?: Enumerable<TileUpsertWithWhereUniqueWithoutParent_pageInput>
    createMany?: TileCreateManyParent_pageInputEnvelope
    set?: Enumerable<TileWhereUniqueInput>
    disconnect?: Enumerable<TileWhereUniqueInput>
    delete?: Enumerable<TileWhereUniqueInput>
    connect?: Enumerable<TileWhereUniqueInput>
    update?: Enumerable<TileUpdateWithWhereUniqueWithoutParent_pageInput>
    updateMany?: Enumerable<TileUpdateManyWithWhereWithoutParent_pageInput>
    deleteMany?: Enumerable<TileScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type TilePageCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutProjectInput>, Enumerable<TilePageUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutProjectInput>
    createMany?: TilePageCreateManyProjectInputEnvelope
    connect?: Enumerable<TilePageWhereUniqueInput>
  }

  export type TilePageUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutProjectInput>, Enumerable<TilePageUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutProjectInput>
    createMany?: TilePageCreateManyProjectInputEnvelope
    connect?: Enumerable<TilePageWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type TilePageUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutProjectInput>, Enumerable<TilePageUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TilePageUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TilePageCreateManyProjectInputEnvelope
    set?: Enumerable<TilePageWhereUniqueInput>
    disconnect?: Enumerable<TilePageWhereUniqueInput>
    delete?: Enumerable<TilePageWhereUniqueInput>
    connect?: Enumerable<TilePageWhereUniqueInput>
    update?: Enumerable<TilePageUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TilePageUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TilePageScalarWhereInput>
  }

  export type TilePageUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<TilePageCreateWithoutProjectInput>, Enumerable<TilePageUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TilePageCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TilePageUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TilePageCreateManyProjectInputEnvelope
    set?: Enumerable<TilePageWhereUniqueInput>
    disconnect?: Enumerable<TilePageWhereUniqueInput>
    delete?: Enumerable<TilePageWhereUniqueInput>
    connect?: Enumerable<TilePageWhereUniqueInput>
    update?: Enumerable<TilePageUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TilePageUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TilePageScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutS3_resourcesInput = {
    create?: XOR<UserCreateWithoutS3_resourcesInput, UserUncheckedCreateWithoutS3_resourcesInput>
    connectOrCreate?: UserCreateOrConnectWithoutS3_resourcesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutS3_resourcesNestedInput = {
    create?: XOR<UserCreateWithoutS3_resourcesInput, UserUncheckedCreateWithoutS3_resourcesInput>
    connectOrCreate?: UserCreateOrConnectWithoutS3_resourcesInput
    upsert?: UserUpsertWithoutS3_resourcesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutS3_resourcesInput, UserUncheckedUpdateWithoutS3_resourcesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type AccessTokenCreateWithoutUserInput = {
    id?: string
    access_token?: string
  }

  export type AccessTokenUncheckedCreateWithoutUserInput = {
    id?: string
    access_token?: string
  }

  export type AccessTokenCreateOrConnectWithoutUserInput = {
    where: AccessTokenWhereUniqueInput
    create: XOR<AccessTokenCreateWithoutUserInput, AccessTokenUncheckedCreateWithoutUserInput>
  }

  export type AccessTokenCreateManyUserInputEnvelope = {
    data: Enumerable<AccessTokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type S3ResourceCreateWithoutAuthorInput = {
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type S3ResourceUncheckedCreateWithoutAuthorInput = {
    id?: number
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type S3ResourceCreateOrConnectWithoutAuthorInput = {
    where: S3ResourceWhereUniqueInput
    create: XOR<S3ResourceCreateWithoutAuthorInput, S3ResourceUncheckedCreateWithoutAuthorInput>
  }

  export type S3ResourceCreateManyAuthorInputEnvelope = {
    data: Enumerable<S3ResourceCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutAuthorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    pages?: TilePageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAuthorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    pages?: TilePageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectCreateManyAuthorInputEnvelope = {
    data: Enumerable<ProjectCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type TileCreateWithoutAuthorInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
    parent_page?: TilePageCreateNestedOneWithoutTilesInput
  }

  export type TileUncheckedCreateWithoutAuthorInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    tilePageId?: number | null
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TileCreateOrConnectWithoutAuthorInput = {
    where: TileWhereUniqueInput
    create: XOR<TileCreateWithoutAuthorInput, TileUncheckedCreateWithoutAuthorInput>
  }

  export type TileCreateManyAuthorInputEnvelope = {
    data: Enumerable<TileCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type TilePageCreateWithoutUserInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    Project?: ProjectCreateNestedOneWithoutPagesInput
    tiles?: TileCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    projectId?: string | null
    tiles?: TileUncheckedCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageCreateOrConnectWithoutUserInput = {
    where: TilePageWhereUniqueInput
    create: XOR<TilePageCreateWithoutUserInput, TilePageUncheckedCreateWithoutUserInput>
  }

  export type TilePageCreateManyUserInputEnvelope = {
    data: Enumerable<TilePageCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: AccessTokenWhereUniqueInput
    update: XOR<AccessTokenUpdateWithoutUserInput, AccessTokenUncheckedUpdateWithoutUserInput>
    create: XOR<AccessTokenCreateWithoutUserInput, AccessTokenUncheckedCreateWithoutUserInput>
  }

  export type AccessTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: AccessTokenWhereUniqueInput
    data: XOR<AccessTokenUpdateWithoutUserInput, AccessTokenUncheckedUpdateWithoutUserInput>
  }

  export type AccessTokenUpdateManyWithWhereWithoutUserInput = {
    where: AccessTokenScalarWhereInput
    data: XOR<AccessTokenUpdateManyMutationInput, AccessTokenUncheckedUpdateManyWithoutAccess_tokensInput>
  }

  export type AccessTokenScalarWhereInput = {
    AND?: Enumerable<AccessTokenScalarWhereInput>
    OR?: Enumerable<AccessTokenScalarWhereInput>
    NOT?: Enumerable<AccessTokenScalarWhereInput>
    id?: StringFilter | string
    access_token?: StringFilter | string
    userId?: StringFilter | string
  }

  export type S3ResourceUpsertWithWhereUniqueWithoutAuthorInput = {
    where: S3ResourceWhereUniqueInput
    update: XOR<S3ResourceUpdateWithoutAuthorInput, S3ResourceUncheckedUpdateWithoutAuthorInput>
    create: XOR<S3ResourceCreateWithoutAuthorInput, S3ResourceUncheckedCreateWithoutAuthorInput>
  }

  export type S3ResourceUpdateWithWhereUniqueWithoutAuthorInput = {
    where: S3ResourceWhereUniqueInput
    data: XOR<S3ResourceUpdateWithoutAuthorInput, S3ResourceUncheckedUpdateWithoutAuthorInput>
  }

  export type S3ResourceUpdateManyWithWhereWithoutAuthorInput = {
    where: S3ResourceScalarWhereInput
    data: XOR<S3ResourceUpdateManyMutationInput, S3ResourceUncheckedUpdateManyWithoutS3_resourcesInput>
  }

  export type S3ResourceScalarWhereInput = {
    AND?: Enumerable<S3ResourceScalarWhereInput>
    OR?: Enumerable<S3ResourceScalarWhereInput>
    NOT?: Enumerable<S3ResourceScalarWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
    create: XOR<ProjectCreateWithoutAuthorInput, ProjectUncheckedCreateWithoutAuthorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAuthorInput, ProjectUncheckedUpdateWithoutAuthorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAuthorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    columns?: IntFilter | number
    index?: IntFilter | number
    public?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    userId?: StringFilter | string
  }

  export type TileUpsertWithWhereUniqueWithoutAuthorInput = {
    where: TileWhereUniqueInput
    update: XOR<TileUpdateWithoutAuthorInput, TileUncheckedUpdateWithoutAuthorInput>
    create: XOR<TileCreateWithoutAuthorInput, TileUncheckedCreateWithoutAuthorInput>
  }

  export type TileUpdateWithWhereUniqueWithoutAuthorInput = {
    where: TileWhereUniqueInput
    data: XOR<TileUpdateWithoutAuthorInput, TileUncheckedUpdateWithoutAuthorInput>
  }

  export type TileUpdateManyWithWhereWithoutAuthorInput = {
    where: TileScalarWhereInput
    data: XOR<TileUpdateManyMutationInput, TileUncheckedUpdateManyWithoutTilesInput>
  }

  export type TileScalarWhereInput = {
    AND?: Enumerable<TileScalarWhereInput>
    OR?: Enumerable<TileScalarWhereInput>
    NOT?: Enumerable<TileScalarWhereInput>
    id?: StringFilter | string
    tile_index?: IntFilter | number
    tap_count?: IntFilter | number
    link_id?: StringNullableFilter | string | null
    display_text?: StringNullableFilter | string | null
    speak_text?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    navigation_page_id?: IntNullableFilter | number | null
    modifier?: StringNullableFilter | string | null
    background_color?: StringNullableFilter | string | null
    border_color?: StringNullableFilter | string | null
    text_color?: StringNullableFilter | string | null
    is_silent?: BoolFilter | boolean
    is_invisible?: BoolFilter | boolean
    is_accented?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    tilePageId?: IntNullableFilter | number | null
    userId?: StringFilter | string
    conjugations?: StringNullableListFilter
  }

  export type TilePageUpsertWithWhereUniqueWithoutUserInput = {
    where: TilePageWhereUniqueInput
    update: XOR<TilePageUpdateWithoutUserInput, TilePageUncheckedUpdateWithoutUserInput>
    create: XOR<TilePageCreateWithoutUserInput, TilePageUncheckedCreateWithoutUserInput>
  }

  export type TilePageUpdateWithWhereUniqueWithoutUserInput = {
    where: TilePageWhereUniqueInput
    data: XOR<TilePageUpdateWithoutUserInput, TilePageUncheckedUpdateWithoutUserInput>
  }

  export type TilePageUpdateManyWithWhereWithoutUserInput = {
    where: TilePageScalarWhereInput
    data: XOR<TilePageUpdateManyMutationInput, TilePageUncheckedUpdateManyWithoutTile_pagesInput>
  }

  export type TilePageScalarWhereInput = {
    AND?: Enumerable<TilePageScalarWhereInput>
    OR?: Enumerable<TilePageScalarWhereInput>
    NOT?: Enumerable<TilePageScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    user_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    projectId?: StringNullableFilter | string | null
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: Enumerable<UserCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    identifier_token?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    hashed_password?: StringNullableFilter | string | null
    theme?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
  }

  export type UserCreateWithoutAccess_tokensInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccess_tokensInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccess_tokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccess_tokensInput, UserUncheckedCreateWithoutAccess_tokensInput>
  }

  export type UserUpsertWithoutAccess_tokensInput = {
    update: XOR<UserUpdateWithoutAccess_tokensInput, UserUncheckedUpdateWithoutAccess_tokensInput>
    create: XOR<UserCreateWithoutAccess_tokensInput, UserUncheckedCreateWithoutAccess_tokensInput>
  }

  export type UserUpdateWithoutAccess_tokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccess_tokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TilePageCreateWithoutTilesInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    Project?: ProjectCreateNestedOneWithoutPagesInput
    user: UserCreateNestedOneWithoutTile_pagesInput
  }

  export type TilePageUncheckedCreateWithoutTilesInput = {
    id?: number
    name: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
    projectId?: string | null
  }

  export type TilePageCreateOrConnectWithoutTilesInput = {
    where: TilePageWhereUniqueInput
    create: XOR<TilePageCreateWithoutTilesInput, TilePageUncheckedCreateWithoutTilesInput>
  }

  export type UserCreateWithoutTilesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTilesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTilesInput, UserUncheckedCreateWithoutTilesInput>
  }

  export type TilePageUpsertWithoutTilesInput = {
    update: XOR<TilePageUpdateWithoutTilesInput, TilePageUncheckedUpdateWithoutTilesInput>
    create: XOR<TilePageCreateWithoutTilesInput, TilePageUncheckedCreateWithoutTilesInput>
  }

  export type TilePageUpdateWithoutTilesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Project?: ProjectUpdateOneWithoutPagesNestedInput
    user?: UserUpdateOneRequiredWithoutTile_pagesNestedInput
  }

  export type TilePageUncheckedUpdateWithoutTilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutTilesInput = {
    update: XOR<UserUpdateWithoutTilesInput, UserUncheckedUpdateWithoutTilesInput>
    create: XOR<UserCreateWithoutTilesInput, UserUncheckedCreateWithoutTilesInput>
  }

  export type UserUpdateWithoutTilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutPagesInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    author: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutPagesInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
  }

  export type ProjectCreateOrConnectWithoutPagesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutPagesInput, ProjectUncheckedCreateWithoutPagesInput>
  }

  export type UserCreateWithoutTile_pagesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutTile_pagesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutTile_pagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTile_pagesInput, UserUncheckedCreateWithoutTile_pagesInput>
  }

  export type TileCreateWithoutParent_pageInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
    author: UserCreateNestedOneWithoutTilesInput
  }

  export type TileUncheckedCreateWithoutParent_pageInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TileCreateOrConnectWithoutParent_pageInput = {
    where: TileWhereUniqueInput
    create: XOR<TileCreateWithoutParent_pageInput, TileUncheckedCreateWithoutParent_pageInput>
  }

  export type TileCreateManyParent_pageInputEnvelope = {
    data: Enumerable<TileCreateManyParent_pageInput>
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutPagesInput = {
    update: XOR<ProjectUpdateWithoutPagesInput, ProjectUncheckedUpdateWithoutPagesInput>
    create: XOR<ProjectCreateWithoutPagesInput, ProjectUncheckedCreateWithoutPagesInput>
  }

  export type ProjectUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutTile_pagesInput = {
    update: XOR<UserUpdateWithoutTile_pagesInput, UserUncheckedUpdateWithoutTile_pagesInput>
    create: XOR<UserCreateWithoutTile_pagesInput, UserUncheckedCreateWithoutTile_pagesInput>
  }

  export type UserUpdateWithoutTile_pagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutTile_pagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type TileUpsertWithWhereUniqueWithoutParent_pageInput = {
    where: TileWhereUniqueInput
    update: XOR<TileUpdateWithoutParent_pageInput, TileUncheckedUpdateWithoutParent_pageInput>
    create: XOR<TileCreateWithoutParent_pageInput, TileUncheckedCreateWithoutParent_pageInput>
  }

  export type TileUpdateWithWhereUniqueWithoutParent_pageInput = {
    where: TileWhereUniqueInput
    data: XOR<TileUpdateWithoutParent_pageInput, TileUncheckedUpdateWithoutParent_pageInput>
  }

  export type TileUpdateManyWithWhereWithoutParent_pageInput = {
    where: TileScalarWhereInput
    data: XOR<TileUpdateManyMutationInput, TileUncheckedUpdateManyWithoutTilesInput>
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    s3_resources?: S3ResourceUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type TilePageCreateWithoutProjectInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutTile_pagesInput
    tiles?: TileCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
    tiles?: TileUncheckedCreateNestedManyWithoutParent_pageInput
  }

  export type TilePageCreateOrConnectWithoutProjectInput = {
    where: TilePageWhereUniqueInput
    create: XOR<TilePageCreateWithoutProjectInput, TilePageUncheckedCreateWithoutProjectInput>
  }

  export type TilePageCreateManyProjectInputEnvelope = {
    data: Enumerable<TilePageCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TilePageUpsertWithWhereUniqueWithoutProjectInput = {
    where: TilePageWhereUniqueInput
    update: XOR<TilePageUpdateWithoutProjectInput, TilePageUncheckedUpdateWithoutProjectInput>
    create: XOR<TilePageCreateWithoutProjectInput, TilePageUncheckedCreateWithoutProjectInput>
  }

  export type TilePageUpdateWithWhereUniqueWithoutProjectInput = {
    where: TilePageWhereUniqueInput
    data: XOR<TilePageUpdateWithoutProjectInput, TilePageUncheckedUpdateWithoutProjectInput>
  }

  export type TilePageUpdateManyWithWhereWithoutProjectInput = {
    where: TilePageScalarWhereInput
    data: XOR<TilePageUpdateManyMutationInput, TilePageUncheckedUpdateManyWithoutPagesInput>
  }

  export type UserCreateWithoutS3_resourcesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    access_tokens?: AccessTokenCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutAuthorInput
    tiles?: TileCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutS3_resourcesInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
    organizationId?: string | null
    access_tokens?: AccessTokenUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutAuthorInput
    tiles?: TileUncheckedCreateNestedManyWithoutAuthorInput
    tile_pages?: TilePageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutS3_resourcesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutS3_resourcesInput, UserUncheckedCreateWithoutS3_resourcesInput>
  }

  export type UserUpsertWithoutS3_resourcesInput = {
    update: XOR<UserUpdateWithoutS3_resourcesInput, UserUncheckedUpdateWithoutS3_resourcesInput>
    create: XOR<UserCreateWithoutS3_resourcesInput, UserUncheckedCreateWithoutS3_resourcesInput>
  }

  export type UserUpdateWithoutS3_resourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutS3_resourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccessTokenCreateManyUserInput = {
    id?: string
    access_token?: string
  }

  export type S3ResourceCreateManyAuthorInput = {
    id?: number
    url: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ProjectCreateManyAuthorInput = {
    id?: string
    name: string
    description?: string | null
    image?: string | null
    columns?: number
    index: number
    public?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TileCreateManyAuthorInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    tilePageId?: number | null
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TilePageCreateManyUserInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    projectId?: string | null
  }

  export type AccessTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
  }

  export type AccessTokenUncheckedUpdateManyWithoutAccess_tokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    access_token?: StringFieldUpdateOperationsInput | string
  }

  export type S3ResourceUpdateWithoutAuthorInput = {
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type S3ResourceUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type S3ResourceUncheckedUpdateManyWithoutS3_resourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pages?: TilePageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pages?: TilePageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    public?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TileUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
    parent_page?: TilePageUpdateOneWithoutTilesNestedInput
  }

  export type TileUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tilePageId?: NullableIntFieldUpdateOperationsInput | number | null
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TileUncheckedUpdateManyWithoutTilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tilePageId?: NullableIntFieldUpdateOperationsInput | number | null
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TilePageUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Project?: ProjectUpdateOneWithoutPagesNestedInput
    tiles?: TileUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    tiles?: TileUncheckedUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageUncheckedUpdateManyWithoutTile_pagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    identifier_token: string
    email: string
    name?: string | null
    image?: string | null
    hashed_password?: string | null
    theme?: string | null
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUpdateManyWithoutAuthorNestedInput
    tiles?: TileUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    access_tokens?: AccessTokenUncheckedUpdateManyWithoutUserNestedInput
    s3_resources?: S3ResourceUncheckedUpdateManyWithoutAuthorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutAuthorNestedInput
    tiles?: TileUncheckedUpdateManyWithoutAuthorNestedInput
    tile_pages?: TilePageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier_token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TileCreateManyParent_pageInput = {
    id?: string
    tile_index: number
    tap_count?: number
    link_id?: string | null
    display_text?: string | null
    speak_text?: string | null
    image?: string | null
    navigation_page_id?: number | null
    modifier?: string | null
    background_color?: string | null
    border_color?: string | null
    text_color?: string | null
    is_silent?: boolean
    is_invisible?: boolean
    is_accented?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    userId: string
    conjugations?: TileCreateconjugationsInput | Enumerable<string>
  }

  export type TileUpdateWithoutParent_pageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
    author?: UserUpdateOneRequiredWithoutTilesNestedInput
  }

  export type TileUncheckedUpdateWithoutParent_pageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tile_index?: IntFieldUpdateOperationsInput | number
    tap_count?: IntFieldUpdateOperationsInput | number
    link_id?: NullableStringFieldUpdateOperationsInput | string | null
    display_text?: NullableStringFieldUpdateOperationsInput | string | null
    speak_text?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    navigation_page_id?: NullableIntFieldUpdateOperationsInput | number | null
    modifier?: NullableStringFieldUpdateOperationsInput | string | null
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    border_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    is_silent?: BoolFieldUpdateOperationsInput | boolean
    is_invisible?: BoolFieldUpdateOperationsInput | boolean
    is_accented?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    conjugations?: TileUpdateconjugationsInput | Enumerable<string>
  }

  export type TilePageCreateManyProjectInput = {
    id?: number
    name: string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TilePageUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTile_pagesNestedInput
    tiles?: TileUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tiles?: TileUncheckedUpdateManyWithoutParent_pageNestedInput
  }

  export type TilePageUncheckedUpdateManyWithoutPagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}